<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Knyaz.Optimus</name>
    </assembly>
    <members>
        <member name="T:Knyaz.Optimus.ResourceProviders.HttpResourceProviderBuilder">
            <summary>
            Allows to configure and build <see cref="T:Knyaz.Optimus.ResourceProviders.HttpResourceProvider"/> object.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.ResourceProviders.HttpResourceProviderBuilder.Basic(System.String,System.String)">
            <summary>
            setup basic athorization login/password
            </summary>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.ResourceProviderBuilder">
            <summary>
            Configures Resource provider.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.ResourceProviders.ResourceProviderBuilder.Http(System.Action{Knyaz.Optimus.ResourceProviders.HttpResourceProviderBuilder})">
            <summary>
            Configures HttpResourceProvider.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.ResourceProviders.ResourceProviderBuilder.UsePrediction">
            <summary>
            Enables premature http resources loading.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.DataResourceProvider">
            <summary>
            Gets the data from url like "data:..."
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.FileResourceProvider">
            <summary>
            Allows to request files content from file system.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.ResourceProviders.FileResourceProvider.SendRequestAsync(Knyaz.Optimus.ResourceProviders.Request)">
            <summary>
            Requests file resource..
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.HttpResourceProvider">
            <summary>
            Allows to request web resources. 
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.IResourceProvider">
            <summary>
            Allows to get resources like files, html pages and etc (dependes on implementation).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.ResourceProviders.IResourceProvider.SendRequestAsync(Knyaz.Optimus.ResourceProviders.Request)">
            <summary>
            Requests resource.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.LinkProvider">
            <summary>
            Convert relative and other paths to absolute Uri.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ResourceProviders.ResourceProvider">
            <summary>
            Redirects requests to resource provider that connected with specified protocol. 
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Console">
            <summary>
            Browser's debugging console.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Console.Log(System.Object)">
            <summary>
            Writes a message to the console.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:Knyaz.Optimus.Console.OnLog">
            <summary>
            Fired when a new message written to the console.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.Css">
            <summary>
            Const strings with css property names and other keywords.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.CssMediaRule">
            <summary>
            Provides access to the media rules styles definitions.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssMediaRule.DeleteRule(System.Int32)">
            <summary>
            Delete a rule from the media block.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssMediaRule.CssRules">
            <summary>
            A list of all CSS rules contained within the media block.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssMediaRule.Media">
            <summary>
            A list of media types for this rule.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssMediaRule.InsertRule(System.String,System.Int32)">
            <summary>
            Used to insert a new rule into the media block.
            </summary>
            <param name="rule"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.CssRule">
            <summary>
            The CssRule is the abstract base interface for any type of CSS statement. This includes both rule sets and at-rules. 
            An implementation is expected to preserve all rules specified in a CSS style sheet, even if the rule is not recognized by the parser.
            Unrecognized rules are represented using the CSSUnknownRule interface.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssRule.CssText">
            <summary>
            Gets or sets parsable textual representation of the rule. 
            This reflects the current state of the rule and not its initial value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssRule.ParentStyleSheet">
            <summary>
            The style sheet that contains this rule.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssRule.Type">
            <summary>
            The type of the rule.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.STYLE_RULE">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.IMPORT_RULE">
            <summary>
            3, CssImportRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.MEDIA_RULE">
            <summary>
            4, CssMediaRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.FONT_FACE_RULE">
            <summary>
            5, CssFontFaceRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.PAGE_RULE">
            <summary>
            6, CssPageRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.KEYFRAMES_RULE">
            <summary>
            7, CssKeyframesRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.KEYFRAME_RULE">
            <summary>
            8, CssKeyframeRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.NAMESPACE_RULE">
            <summary>
            10, CssNamespaceRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.COUNTER_STYLE_RULE">
            <summary>
            11, CssCounterStyleRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.SUPPORTS_RULE">
            <summary>
            12, CssSupportsRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.DOCUMENT_RULE">
            <summary>
            13, CssDocumentRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.FONT_FEATURE_VALUES_RULE">
            <summary>
            14, CssFontFeatureValuesRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.VIEWPORT_RULE">
            <summary>
            15, CssViewportRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssRule.REGION_STYLE_RULE">
            <summary>
            16, CssRegionStyleRule
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.CssSelector.Specifity">
            <summary>
            Priority of the selector.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssSelector.IsMatches(Knyaz.Optimus.Dom.Interfaces.IElement)">
            <summary>
            Check if the element matched by given selector.
            </summary>
            <param name="elt">The element to be checked.</param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.CssStyleDeclaration">
            <summary>
            Represents a single CSS declaration block.
            http://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/css/CSSStyleDeclaration.html
            </summary>
            <inheritdoc cref="T:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration"/>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Item(System.Int32)">
            <summary>
            Retrieve the properties anmes that have been explicitly set in this declaration block.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Retrieves the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CssStyleDeclaration is not attached to a CssRule.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.RemoveProperty(System.String)">
            <summary>
            Removes a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.SetProperty(System.String,System.String,System.String)">
            <summary>
            Sets a property value and priority within this declaration block.
            </summary>
            <param name="name">The name of the property to be set.</param>
            <param name="value">The value of the property.</param>
            <param name="important">The priority of the property.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.SetFont(System.String)">
            <param name="value">[font-style", "", "font-variant", "", "font-weight] font-size [/line-height] font-family", "inherit</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Azimuth">
            <summary>
            This property is most likely to be implemented by mixing the same signal into different channels at differing volumes. It might also use phase shifting, digital delay, and other such techniques to provide the illusion of a sound stage. The precise means used to achieve this effect and the number of speakers used to do so are user agent-dependent; this property merely identifies the desired end result. 
            </summary>
            <remarks>
            Value: $lt;angle&gt; | [[ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Background">
            <summary>
            Shorthand property for setting the individual background properties (i.e., 'background-color', 'background-image', 'background-repeat', 'background-attachment' and 'background-position') at the same place in the style sheet. 
            </summary>
            <remarks>
            The 'background' property first sets all the individual background properties to their initial values, then assigns explicit values given in the declaration. 
            Value: [&lt;'background-color'&gt; || &lt;'background-image'&gt; || &lt;'background-repeat'&gt; || &lt;'background-attachment'&gt; || &lt;'background-position'&gt;] | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BackgroundAttachment">
            <summary>
            Gets or sets the 'background-attachment' css property. If a background image is specified, this property specifies whether it is fixed with regard to the viewport ('fixed') or scrolls along with the document ('scroll'). 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BackgroundColor">
            <summary>
            Gets or sets the 'background-color' css property which represents the background color of an element, either a &lt;color&gt; value or the keyword 'transparent', to make the underlying colors shine through.
            </summary>
            <remarks>
            Value: &lt;color&gt; | transparent | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BackgroundImage">
            <summary>
            Gets or sets the 'background-image' css property which represents the background image of an element.
            </summary>
            <remarks>
            When setting a background image, authors should also specify a background color that will be used when the image is unavailable. When the image is available, it is rendered on top of the background color.
            Value: &lt;uri&gt; | none | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BackgroundPosition">
            <summary>
            If a background image has been specified, this property specifies its initial position. Values have the following meanings:
            </summary>
            <remarks>
            [ [&lt;percentage&gt; | &lt;length&gt; ]{1,2} | [ [top | center | bottom] || [left | center | right] ] ] | inherit
            http://www.w3.org/TR/1998/REC-CSS2-19980512/colors.html#propdef-background-position
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BackgroundRepeat">
            <summary>
            If a background image is specified, this property specifies whether the image is repeated (tiled), 
            and how. All tiling covers the content and padding areas of a box. 
            </summary>
            <remarks>Values have the following meanings:
            repeat - The image is repeated both horizontally and vertically.
            repeat-x - The image is repeated horizontally only.
            repeat-y - The image is repeated vertically only.
            no-repeat - The image is not repeated: only one copy of the image is drawn.
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Border">
            <summary>
            Get or sets the 'border' css property. The 'border' property is a shorthand property for setting the same width, color, and style for all four borders of a box. Unlike the shorthand 'margin' and 'padding' properties, the 'border' property cannot set different values on the four borders. To do so, one or more of the other border properties must be used.
            </summary>
            <remarks>
            Value: [ &lt;'border-width'&gt; || &lt;'border-style'&gt; || &lt;color&gt; ] | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderCollapse">
            <summary>
            Gets or sets the 'border-collapse' css property. This property selects a table's border model. The value 'separate' selects the separated borders border model. The value 'collapse' selects the collapsing borders model. The models are described below. 
            </summary>
            <remarks>
            Value: collapse | separate | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderColor">
            <summary>
            Gets or sets the 'border-color' css property. The 'border-color' property sets the color of the four borders.
            </summary>
            <remarks>
            Value: &lt;color&gt;{1,4} | transparent | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderSpacing">
            <summary>
            Gets or sets the 'border-spacing' css property. The lengths specify the distance that separates adjacent cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative. 
            </summary>
            <remarks>
            Value: &lt;length&gt; &lt;length&gt;? | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderStyle">
            <summary>
            Gets or sets the 'border-style' css property. The 'border-style' property represents the style of the four borders. It can have from one to four values, and the values are set on the different sides as for 'border-width' above. 
            </summary>
            <remarks>
            Value: &lt;border-style&gt;{1,4} | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderTop">
            <summary>
            Gets or sets the 'border-top' css property. This is a shorthand property for setting the width, style, and color of the top border of a box. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderRight">
            <summary>
            Gets or sets the 'border-right' css property. This is a shorthand property for setting the width, style, and color of the right border of a box. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderBottom">
            <summary>
            Gets or sets the 'border-bottom' css property. This is a shorthand property for setting the width, style, and color of the bottom border of a box. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderLeft">
            <summary>
            Gets or sets the 'border-left' css property. This is a shorthand property for setting the width, style, and color of the left border of a box. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderTopColor">
            <summary>
            Gets or sets the 'border-top-color' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderRightColor">
            <summary>
            Gets or sets the 'border-right-color' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderBottomColor">
            <summary>
            Gets or sets the 'border-bottom-color' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderLeftColor">
            <summary>
            Gets or sets the 'border-left-color' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderTopStyle">
            <summary>
            Gets or sets the 'border-top-style' css property. Specifies the top line style of a box's border.
            </summary>
            <remarks>
            Value: dotted|dashed|double|groove|ridge|inset|outset|solid
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderRightStyle">
            <summary>
            Gets or sets the 'border-right-style' css property. Specifies the right line style of a box's border.
            </summary>
            <remarks>
            Value: dotted|dashed|double|groove|ridge|inset|outset|solid
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderBottomStyle">
            <summary>
            Gets or sets the 'border-bottom-style' css property. Specifies the bottom line style of a box's border.
            </summary>
            <remarks>
            Value: dotted|dashed|double|groove|ridge|inset|outset|solid
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderLeftStyle">
            <summary>
            Gets or sets the 'border-left-style' css property. Specifies the left line style of a box's border.
            </summary>
            <remarks>
            Value: dotted|dashed|double|groove|ridge|inset|outset|solid
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderTopWidth">
            <summary>
            Gets or sets the 'border-top-width' css property.
            </summary>
            <remarks>
            Value: thin|medium|thick|&lt;length&gt;
            Default value: medium
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderRightWidth">
            <summary>
            Gets or sets the 'border-right-width' css property.
            </summary>
            <remarks>
            Value: thin|medium|thick|&lt;length&gt;
            Default value: medium
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderBottomWidth">
            <summary>
            Gets or sets the 'border-bottom-width' css property.
            </summary>
            <remarks>
            Value: thin|medium|thick|&lt;length&gt;
            Default value: medium
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderLeftWidth">
            <summary>
            Gets or sets the 'border-left-width' css property.
            </summary>
            <remarks>
            Value: thin|medium|thick|&lt;length&gt;
            Default value: medium
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.BorderWidth">
            <summary>
            Gets or sets the 'border-width' css property which is a shorthand property for setting 'border-top-width', 'border-right-width', 'border-bottom-width', and 'border-left-width' at the same place in the style sheet. 
            </summary>
            <remarks>
            If there is only one value, it applies to all sides. If there are two values, the top and bottom borders are set to the first value and the right and left are set to the second.If there are three values, the top is set to the first value, the left and right are set to the second, and the bottom is set to the third. If there are four values, they apply to the top, right, bottom, and left, respectively.
            Value: (thin|medium|thick|&lt;length&gt;){1,4} | inherit
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Bottom">
            <summary>
            Specifies how far a box's bottom content edge is offset above the bottom of the box's containing block. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.CaptionSide">
            <summary>
            Specifies the position of the caption box with respect to the table box.
            </summary>
            <remarks>
            Value: top | bottom | left | right | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Clear">
            <summary>
            Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. (It may be that the element itself has floating descendants; the 'clear' property has no effect on those.) 
            </summary>
            <remarks>
            Value: none | left | right | both | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Clip">
            <summary>
            Defines what portion of an element's rendered content is visible.
            </summary>
            <remarks>
            Value: &lt;shape&gt; | auto | inherit 
            In CSS2, the only valid &lt;shape&gt; value is: rect (&lt;top&gt; &lt;right&gt; &lt;bottom&gt; &lt;left&gt;) where &lt;top&gt;, &lt;bottom&gt; &lt;right&gt;, and &lt;left&gt; specify offsets from the respective sides of the box. 
            &lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, and&lt;left&gt; may either have a&lt;length&gt; value or 'auto'.
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Color">
            <summary>
            Specifies the foreground color of an element's text content.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Content">
            <summary>
            This property is used with the :before and :after pseudo-elements to generate content in a document.
            </summary>
            <remarks>
            Value: [ &lt;string&gt; | &lt;uri&gt; | &lt;counter&gt; | attr(X) | open-quote | close-quote | no-open-quote | no-close-quote ]+ | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.CounterIncrement">
            <summary>
            Gets or sets the 'counter-increment' property which accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer indicates by how much the counter is incremented for every occurrence of the element. The default increment is 1.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.CounterReset">
            <summary>
            Gets or sets the 'counter-reset' property wchich contains a list of one or more names of counters, each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Cue">
            <summary>
            Gets or sets the 'cue' property which is a shorthand for setting 'cue-before' and 'cue-after'. If two values are given, the first value is 'cue-before' and the second is 'cue-after'. If only one value is given, it applies to both properties.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.CueAfter">
            <summary>
            Auditory icons are another way to distinguish semantic elements. Sounds may be played before and/or after the element to delimit it
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.CueBefore">
            <summary>
            Auditory icons are another way to distinguish semantic elements. Sounds may be played before and/or after the element to delimit it
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Cursor">
            <summary>
            Specifies the type of cursor to be displayed for the pointing device. Values have the following meanings:
            </summary>
            <remarks>
            Value:[ [&lt;uri&gt; ,]* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize| text | wait | help ] ] | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Direction">
            <summary>
            Specifies the base writing direction of blocks and the direction of embeddings and overrides (see 'unicode-bidi') for the Unicode bidirectional algorithm. In addition, it specifies the direction of table column layout, the direction of horizontal overflow, and the position of an incomplete last line in a block in case of 'text-align: justify'.
            </summary>
            <remarks>
            Value: ltr | rtl | inherit
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Display">
            <summary>
            Specifies how the itemto be layed out.
            </summary>
            <remarks>
            Value:inline | block | list-item | run-in | compact | marker | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | none | inherit 
            block -	This value causes an element to generate a principal block box.
            inline - This value causes an element to generate one or more inline boxes.
            list-item -	This value causes an element(e.g., LI in HTML) to generate a principal block box and a list-item inline box.For information about lists and examples of list formatting, please consult the section on lists.
            marker - This value declares generated content before or after a box to be a marker. This value should only be used with :before and :after pseudo-elements attached to block-level elements. In other cases, this value is interpreted as 'inline'. Please consult the section on markers for more information. 
            none - This value causes an element to generate no boxes in the formatting structure (i.e., the element has no effect on layout). Descendant elements do not generate any boxes either; this behavior cannot be overridden by setting the 'display' property on the descendants.
            run-in and compact - These values create either block or inline boxes, depending on context.Properties apply to run-in and compact boxes based on their final status (inline-level or block-level). For example, the 'white-space' property only applies if the box becomes a block box.
            table, inline-table, table-row-group, table-column, table-column-group, table-header-group, table-footer-group, table-row, table-cell, and table-caption - These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables). 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Elevation">
            <summary>
            Affects the spatial audio feature.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.EmptyCells">
            <summary>
            Gets or sets the 'empty-cells' css property which controls the rendering of borders around cells that have no visible content.
            </summary>
            <remarks>
            Empty cells and cells with the 'visibility' property set to 'hidden' are considered to have no visible content. 
            Visible content includes " " and other whitespace except ASCII CR ("\0D"), LF ("\0A"), tab ("\09"), 
            and space ("\20"). 
            When this property has the value 'show', borders are drawn around empty cells (like normal cells). 
            A value of 'hide' means that no borders are drawn around empty cells. Furthermore, if all the cells in a row have a value of 'hide' and have no visible content, the entire row behaves as if it had 'display: none'. 
            Available value: show | hide | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Float">
            <summary>
            Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. (It may be that the element itself has floating descendants; the 'clear' property has no effect on those.) 
            Value: none | left | right | both | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Font">
            <summary>
            The shorthand property for setting 'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family', at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts. 
            </summary>
            <remarks>
            Value: [ [ &lt;'font-style'&gt; || &lt;'font-variant'&gt; || &lt;'font-weight'&gt; ]? &lt;'font-size'&gt; [ / &lt;'line-height'&gt; ]? &lt;'font-family'&gt; ] | caption | icon | menu | message-box | small-caption | status-bar | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontFamily">
            <summary>
            Gets or sets the 'font-family' css property which specifies a prioritized list of font family names and/or generic family names.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontSize">
            <summary>
            Gets or sets the 'font-size' css property which specifies the size of the font.
            </summary>
            <remarks>
            Value: &lt;absolute-size&gt; | &lt;relative-size&gt; | &lt;length&gt; | &lt;percentage&gt; | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontSizeAdjust">
            <summary>
            Gets or sets the 'font-size-adjust' css property. 
            </summary>
            <remarks>
            In bicameral scripts, the subjective apparent size and legibility of a font are less dependent on their 'font-size' value than on the value of their 'x-height', or, more usefully, on the ratio of these two values, called the aspect value (font size divided by x-height). The higher the aspect value, the more likely it is that a font at smaller sizes will be legible. Inversely, faces with a lower aspect value will become illegible more rapidly below a given threshold size than faces with a higher aspect value. Straightforward font substitution that relies on font size alone may lead to illegible characters. 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontStretch">
            <summary>
            Gets or sets the 'font-stretch' css property which selects a normal, condensed, or extended face from a font family.
            </summary>
            <remarks>
            Value: normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontStyle">
            <summary>
            Gets or sets the 'font-style' css property. Value: normal | italic | oblique | inherit.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontVariant">
            <summary>
            Gets or sets the 'font-variant' css property. 
            </summary>
            <remarks>
            In a small-caps font, the glyphs for lowercase letters look similar to the uppercase ones, but in a smaller size and with slightly different proportions. The 'font-variant' property requests such a font for bicameral (having two cases, as with Latin script).
            Value: normal | small-caps | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.FontWeight">
            <summary>
            Specifies the weight of the font. Value: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Height">
            <summary>
            Specifies the content height of boxes generated by block-level and replaced elements. This property does not apply to non-replaced inline-level elements.
            </summary>
            <remarks>
            Value: &lt;length&gt; | &lt;percentage&gt; | auto | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Left">
            <summary>
            specifies how far a box's left content edge is offset to the right of the left edge of the box's containing block. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.LetterSpacing">
            <summary>
            Gets or sets the 'letter-spacing' css property which specifies spacing behavior between text characters. Values: normal | &lt;length&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.LineHeight">
            <summary>
            Gets or sets the 'line-height' css property. If the property is set on a block-level element whose content is composed of inline-level elements, it specifies the minimal height of each generated inline box. 
            If the property is set on an inline-level element, it specifies the exact height of each box generated by the element. (Except for inline replaced elements, where the height of the box is given by the 'height' property.) 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.ListStyle">
            <summary>
            Gets or sets the 'line-style' css property which is a shorthand notation for setting the three properties 'list-style-type', 'list-style-image', and 'list-style-position'.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.ListStyleImage">
            <summary>
            Gets or sets the 'line-style-image' css property which specifies the image that will be used as the list item marker. Value:  &lt;uri&gt; | none | inherit
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.ListStylePosition">
            <summary>
            Gets or sets the 'line-style-position' css property which specifies the position of the marker box in the principal block box. Value: inside | outside | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.ListStyleType">
            <summary>
            Gets or sets the 'line-style-type' css property which specifies appearance of the list item marker if 'list-style-image' has the value 'none' or if the image pointed to by the URI cannot be displayed.
            </summary>
            <remarks>Value: disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-alpha | lower-latin | upper-alpha | upper-latin | hebrew | armenian | georgian | cjk-ideographic | hiragana | katakana | hiragana-iroha | katakana-iroha | none | inherit </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Margin">
            <summary>
            The shorthand property for setting 'margin-top', 'margin-right', 'margin-bottom', and 'margin-left' at the same place in the style sheet.
            </summary>
            <remarks>
            Value: &lt;margin-width&gt;{1,4} | inherit 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MarginTop">
            <summary>
            Gets or sets the 'mergin-top' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MarginRight">
            <summary>
            Gets or sets the 'mergin-right' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MarginBottom">
            <summary>
            Gets or sets the 'mergin-bottom' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MarginLeft">
            <summary>
            Gets or sets the 'mergin-left' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MarkerOffset">
            <summary>
            Gets or sets the 'marker-offset' css property which specifies the distance between the nearest border edges of a marker box and its associated principal box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Marks">
            <summary>
            Specifies whether cross marks or crop marks or both should be rendered just outside the page box edge. 
            </summary>
            <remarks>
            Values: [ crop || cross ] | none | inherit 
            Crop marks indicate where the page should be cut.Cross marks(also known as register marks or registration marks) are used to align sheets.
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MaxHeight">
            <summary>
            Gets or sets the 'max-height' css property. Value: &lt;length&gt; | &lt;percentage&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MaxWidth">
            <summary>
            Gets or sets the 'max-width' css property. Value: &lt;length&gt; | &lt;percentage&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MinHeight">
            <summary>
            Gets or sets the 'min-height' css property. Value: &lt;length&gt; | &lt;percentage&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.MinWidth">
            <summary>
            Gets or sets the 'min-height' css property. Value: &lt;length&gt; | &lt;percentage&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Orphans">
            <summary>
            Specifies the minimum number of lines of a paragraph that must be left at the bottom of a page. Value:  &lt;integer&gt; | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Outline">
            <summary>
            The shorthand property for setting 'outline-color', 'outline-style' and 'outline-width' properties. 
            Specifies outlines around visual objects such as buttons, active form fields, image maps, etc.
            </summary>
            <remarks>
            CSS2 outlines differ from borders in the following ways:
            Outlines do not take up space.
            Outlines may be non-rectangular.
            Value:  [ &lt;'outline-color'&gt; || &lt;'outline-style'&gt; || &lt;'outline-width'&gt; ] | inherit
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.OutlineColor">
            <summary>
            Gets or sets 'outline-color' css property. <see cref="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Outline"/> for more details.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.OutlineStyle">
            <summary>
            Gets or sets 'outline-style' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.OutlineWidth">
            <summary>
            Gets or sets 'outline-width' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Overflow">
            <summary>
            specifies whether the content of a block-level element is clipped when it overflows the element's box (which is acting as a containing block for the content). 
            Value:  visible | hidden | scroll | auto | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Padding">
            <summary>
            The shorthand property for setting 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' at the same place in the style sheet. Value:  &lt;padding-width&gt;{1,4} | inherit
            </summary>
            <remarks>
            If there is only one value, it applies to all sides. If there are two values, the top and bottom paddings are set to the first value and the right and left paddings are set to the second. If there are three values, the top is set to the first value, the left and right are set to the second, and the bottom is set to the third. If there are four values, they apply to the top, right, bottom, and left, respectively. 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PaddingTop">
            <summary>
            Gets or sets the 'padding-top' css property which specifies top padding of a box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PaddingRight">
            <summary>
            Gets or sets the 'padding-right' css property which specifies right padding of a box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PaddingBottom">
            <summary>
            Gets or sets the 'padding-bottom' css property which specifies bottom padding of a box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PaddingLeft">
            <summary>
            Gets or sets the 'padding-left' css property which specifies left padding of a box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Page">
            <summary>
            Specifies a particular type of page where an element should be displayed. Value: &lt;identifier&gt; | auto 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PageBreakAfter">
            <summary>
            Gets or sets the 'page-break-after' css property. Value: auto | always | avoid | left | right | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PageBreakBefore">
            <summary>
            Gets or sets the 'page-break-before' css property. Value: auto | always | avoid | left | right | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PageBreakInside">
            <summary>
            Gets or sets the 'page-break-inside' css property. Value: avoid | auto | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Pause">
            <summary>
            The shorthand for setting 'pause-before' and 'pause-after'. If two values are given, the first value is 'pause-before' and the second is 'pause-after'. If only one value is given, it applies to both properties. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PauseAfter">
            <summary>
            Specifies a pause to be observed after speaking an element's content. Value:  &lt;time&gt; | &lt;percentage&gt; | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PauseBefore">
            <summary>
            Specifies a pause to be observed before speaking an element's content. Value:  &lt;time&gt; | &lt;percentage&gt; | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Pitch">
            <summary>
            Specifies the average pitch (a frequency) of the speaking voice. Values: &lt;frequency&gt; | x-low | low | medium | high | x-high | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PitchRange">
            <summary>
            Specifies variation in average pitch. Value: &lt;number&gt; | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.PlayDuring">
            <summary>
            Specifies a sound to be played as a background while an element's content is spoken. Value: &lt;uri&gt; mix? repeat? | auto | none | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Position">
            <summary>
            Determines which of the CSS2 positioning algorithms is used to calculate the position of a box. Value:  static | relative | absolute | fixed | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Quotes">
            <summary>
            Specifies quotation marks for any number of embedded quotations. Value:  [&lt;string&gt; &lt;string&gt;]+ | none | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Richness">
            <summary>
            Specifies the richness, or brightness, of the speaking voice. Value:  &lt;number&gt; | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Right">
            <summary>
            Specifies how far a box's right content edge is offset to the left of the right edge of the box's containing block. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Size">
            <summary>
            Specifies the size and orientation of a page box. Value:  &lt;length&gt;{1,2} | auto | portrait | landscape | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Speak">
            <summary>
            Specifies whether text will be rendered aurally and if so, in what manner. Value:  normal | none | spell-out | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.SpeakHeader">
            <summary>
            Gets or sets the 'speak-header' css property which specifies whether table headers are spoken before every cell, or only before a cell when that cell is associated with a different header than the previous cell.
            Value: once | always | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.SpeakNumeral">
            <summary>
            Gets or sets the 'speak-numeral' css property which specifies how numerals are spoken. Value: digits | continuous | inherit.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.SpeakPunctuation">
            <summary>
            Gets or sets the 'speak-punctuation' css property which specifies how punctuation is spoken. Value: code | none | inherit.
            </summary>
            <remarks>
            Values have the following meanings:
            code - Punctuation such as semicolons, braces, and so on are to be spoken literally.
            none - Punctuation is not to be spoken, but instead rendered naturally as various pauses. 
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.SpeechRate">
            <summary>
            Gets or sets the 'speach-rate' css property which specifies the speaking rate. Value: &lt;number&gt; | x-slow | slow | medium | fast | x-fast | faster | slower | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Stress">
            <summary>
            Specifies the height of "local peaks" in the intonation contour of a voice. Value: &lt;number&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.TableLayout">
            <summary>
            Gets or sets the 'table-layout' css property which specifies the algorithm used to lay out the table cells, rows, and columns.
            Value: auto | fixed | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.TextAlign">
            <summary>
            Gets or sets the 'text-align' css property which specifies how inline content of a block is aligned. 
            Value: left | right | center | justify | &lt;string&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.TextDecoration">
            <summary>
            Gets or sets the 'text-decoration' css property which describes decorations that are added to the text of an element.
            Value: none | [ underline || overline || line-through || blink ] | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.TextIndent">
            <summary>
            Gets or sets the 'text-indent' css property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.TextShadow">
            <summary>
            Gets or sets the 'text-shadow' css property which specifies shadow effects to be applied to the text of the element.
            </summary>
            <remarks>
            This property accepts a comma-separated list of shadow effects to be applied to the text of the element. The shadow effects are applied in the order specified and may thus overlay each other, but they will never overlay the text itself.
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.TextTransform">
            <summary>
            Gets or sets the 'text-transform' css property which specifies capitalization effects of an element's text.
            Value: capitalize | uppercase | lowercase | none | inherit.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Top">
            <summary>
            Specifies how far a box's top content edge is offset below the top edge of the box's containing block. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.UnicodeBidi">
            <summary>
            Gets or sets the 'unicode-bidi' css property. 
            Value:  normal | embed | bidi-override | inherit.
            </summary>
            <remarks>
            normal - The element does not open an additional level of embedding with respect to the bidirectional algorithm.For inline-level elements, implicit reordering works across element boundaries. 
            embed - If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm.The direction of this embedding level is given by the 'direction' property.Inside the element, reordering is done implicitly. This corresponds to adding a LRE (U+202A; for 'direction: ltr') or RLE(U+202B; for 'direction: rtl') at the start of the element and a PDF(U+202C) at the end of the element.
            bidi-override - If the element is inline-level or a block-level element that contains only inline-level elements, this creates an override. This means that inside the element, reordering is strictly in sequence according to the 'direction' property; the implicit part of the bidirectional algorithm is ignored.This corresponds to adding a LRO (U+202D; for 'direction: ltr') or RLO(U+202E; for 'direction: rtl') at the start of the element and a PDF(U+202C) at the end of the element.
            </remarks>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.VerticalAlign">
            <summary>
            Gets or sets the 'vertical-align' css property which affects the vertical positioning inside a line box of the boxes generated by an inline-level element.
            Value: baseline | sub | super | top | text-top | middle | bottom | text-bottom | &lt;percentage&gt; | &lt;length&gt; | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Visibility">
            <summary>
            Specifies whether the boxes generated by an element are rendered.
            Value: visible | hidden | collapse | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.VoiceFamily">
            <summary>
            Gets or sets the 'voice-family' css property which is a comma-separated, prioritized list of voice family names.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Volume">
            <summary>
            Specifies the median volume of the waveform.
            Value: &lt;number&gt; | &lt;percentage&gt; | silent | x-soft | soft | medium | loud | x-loud | inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.WhiteSpace">
            <summary>
            Gets or sets the 'white-space' css property which specifies how whitespace inside the element is handled.
            Value: normal | pre | nowrap | inherit.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Widows">
            <summary>
            Specifies the minimum number of lines of a paragraph that must be left at the top of a page. Value:  &lt;integer&gt; | inherit
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Width">
            <summary>
            Specifies the content width of boxes generated by block-level and replaced elements
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.WordSpacing">
            <summary>
            Gets or sets the 'word-spacing' css property which specifies spacing behavior between words.
            Value: normal | &lt;length&gt;	| inherit 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.ZIndex">
            <summary>
            Gets or sets the 'z-index' css property. For a positioned box, the 'z-index' property specifies: 
            1. The stack level of the box in the current stacking context.
            2. Whether the box establishes a local stacking context.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleDeclaration.Validate(System.String,System.String)">
            <summary>
            Validates property value and returns normalied value.
            </summary>
            <param name="propertyName">Property name to be validated</param>
            <param name="value">Property value.</param>
            <returns>Valid property value.</returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.CssStyleRule">
            <summary>
            Represents a single CSS style rule.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleRule.SelectorText">
            <summary>
            Gets the textual representation of the selector for this rule.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleRule.Style">
            <summary>
            Gets the parent CSSStyleDeclaration object for the rule.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleRule.IsMatchesSelector(Knyaz.Optimus.Dom.Interfaces.IElement)">
            <summary>
            Check if the specified elt matched by selector
            </summary>
            <param name="elt"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.CssStyleSheet">
            <summary>
            Represents a single CSS style sheet.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.CssStyleSheet.CssRules">
            <summary>
            Gets a live CSSRuleList, listing the CssRule objects in the style sheet.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleSheet.DeleteRule(System.Int32)">
            <summary>
            Deletes a rule at the specified position from the style sheet.
            </summary>
            <param name="idx">The  position of the role to be removed.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.CssStyleSheet.InsertRule(System.String,System.Int32)">
            <summary>
            Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.
            </summary>
            <param name="rule">The textual representation of the rule to be inserted.</param>
            <param name="idx">The desired insertion position.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.DocumentStyling">
            <summary>
            Loads css, applies computed style for nodes
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Css.DocumentStyling._userAgentStyleSheet">
            <summary>
            Default styles.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.DocumentStyling.GetComputedStyle(Knyaz.Optimus.Dom.Interfaces.IElement)">
            <summary>
            Gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.
            </summary>
            <param name="elt">The <see cref="T:Knyaz.Optimus.Dom.Elements.Element"/> for which to get the computed style.</param>
            <returns>The <see cref="T:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration"/> containing all element's computed properties.</returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.MediaList">
            <summary>
            Provides an ordered collection of media. An empty list is the same as a list that contains the medium "all".
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.MediaList.AppendMedium(System.String)">
            <summary>
            Adds the medium newMedium to the end of the list.
            </summary>
            <param name="newMedium">The medium to add</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.MediaList.DeleteMedium(System.String)">
            <summary>
            Deletes the medium indicated by oldMedium from the list.
            </summary>
            <param name="oldMedium"></param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.MediaList.Length">
            <summary>
            The number of media in the list.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.MediaList.MediaText">
            <summary>
            The parsable textual representation of the media list.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.MediaList.Item(System.Int32)">
            <summary>
            Returns the medium from the list specified by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.MediaQueryList">
            <summary>
            Stores information on a media query applied to a document, 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.MediaQueryList.Media">
            <summary>
            Gets a serialized media query.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.MediaQueryList.Matches">
            <summary>
            Returns <c>true</c> if the document currently matches the media query list, or <c>false</c> if not.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Css.StyleSheetsList">
            <summary>
            Collection of style sheets.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.StyleSheetsList.IsReadOnly">
            <summary>
            Always <c>false</c>.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Css.StyleSheetsList.RemoveAt(System.Int32)">
            <summary>
            Removes stylesheet at the specified postion.
            </summary>
            <param name="index">Index of the stylesheet to be removed.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Css.StyleSheetsList.Item(System.Int32)">
            <summary>
            Gets the stylesheet at the specified index.
            </summary>
            <param name="index">The index of stylesheet to get.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.DocumentReadyStates">
            <summary>
            Available values of the <see cref="P:Knyaz.Optimus.Dom.Document.ReadyState"/> property.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DocumentReadyStates.Loading">
            <summary>
            The document is still loading.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DocumentReadyStates.Interactive">
            <summary>
            The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DocumentReadyStates.Complete">
            <summary>
            The document and all sub-resources have finished loading. The state indicates that the load event is about to fire.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Document">
            <summary>
            http://www.w3.org/html/wg/drafts/html/master/dom.html#document
            http://dev.w3.org/html5/spec-preview/dom.html
            all idls http://www.w3.org/TR/REC-DOM-Level-1/idl-definitions.html
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Cookie">
            <summary>
            Get or set the cookies associated with the current document. 
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.#ctor(System.String,System.String,Knyaz.Optimus.Dom.Elements.DocType,Knyaz.Optimus.Dom.Interfaces.IWindow)">
            <summary>
            Creates new <sse cref="T:Knyaz.Optimus.Dom.Document"/> instance.
            </summary>
            <param name="window">The Window object ot be associated with the document. Can be null.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.TextContent">
            <summary>
            Is always null.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.DocType">
            <summary>
            Returns first DocType element in document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Implementation">
            <summary>
            Return this document's DOMimplementation object.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.DefaultView">
            <summary>
            Returns the window object associated with a document, or null if none is available.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.DocumentElement">
            <summary>
            Gets the Document Element of the document (the &lt;html&gt; element)
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.ReadyState">
            <summary>
            Gets the (loading) status of the document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.NodeName">
            <summary>
            This is always #document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Location">
            <summary>
            Returns a <see cref="P:Knyaz.Optimus.Dom.Document.Location"/> object, which contains information about the URL of the document 
            and provides methods for changing that URL and loading another URL.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.DocumentURI">
            <summary>
            Sets or gets the location of the document
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Forms">
            <summary>
            Returns a collection of all &lt;form&gt; elements in the document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Scripts">
            <summary>
            Returns a collection of &lt;script&gt; elements in the document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.Write(System.String)">
            <summary>
            Writes HTML expressions or JavaScript code to a document.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.WriteLn(System.String)">
            <summary>
            Same as write(), but adds a newline character after each statement
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Document.DomContentLoaded">
            <summary>
            Fired when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.StyleSheets">
            <summary>
            Returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.CreateElement(System.String)">
            <summary>
            Creates an Element node.
            </summary>
            <param name="tagName">The tag name of element to be created.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.CreateAttribute(System.String)">
            <summary>
            Creates an attribute with the specified name, and returns the attribute as an <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> object.
            </summary>
            <param name="name">The name of attribute.</param>
            <returns>Created attribute.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.GetElementById(System.String)">
            <summary>
            Returns the first element of the document that has the ID attribute with the specified value.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.GetElementsByName(System.String)">
            <summary>
            Returns a collection containing all elements of the document with a specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.CreateDocumentFragment">
            <summary>
            Creates an empty DocumentFragment node.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.CreateTextNode(System.String)">
            <summary>
            Creates a Text node.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.CreateComment(System.String)">
            <summary>
            Creates a Comment node with the specified text.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Body">
            <summary>
            Sets or gets the document's body (the &lt;body&gt; element)
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Head">
            <summary>
            Returns the &lt;head&gt; element of the current document. If there are more than one &lt;head&gt; elements, the first one is returned.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.CreateEvent(System.String)">
            <summary>
            Creates an event of the type specified.
            </summary>
            <remarks>
            The returned object should be first initialized and can then be passed to <see cref="M:Knyaz.Optimus.Dom.Elements.Node.DispatchEvent(Knyaz.Optimus.Dom.Events.Event)"/>.
            </remarks>
            <param name="type">The string that represents the type of event to be created. 
            Possible event types include: "UIEvents", "MouseEvents", 
            "MutationEvents", "HTMLEvents", "KeyboardEvents".</param>
            <returns>Created <see cref="T:Knyaz.Optimus.Dom.Events.Event"/> object.</returns>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Document.DomNodeInserted">
            <summary>
            Faired when new element inserted into Document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.Title">
            <summary>
            Sets or gets the title of the document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Document.ActiveElement">
            <summary>
            Gets the currently focused element in the document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.QuerySelector(System.String)">
            <summary>
            Gets the first element that matches a specified CSS selector(s) in the document.
            </summary>
            <param name="query">The CSS selector.</param>
            <returns>Found element or <c>null</c>.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.QuerySelectorAll(System.String)">
            <summary>
            Gets a collection containing all elements that matches a specified CSS selector(s) in the document
            </summary>
            <param name="query">The CSS selector.</param>
            <returns>The Readonly collection of found elements.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Document.HandleNodeScript(Knyaz.Optimus.Dom.Events.Event,System.String)">
            <summary>
            Document nodes call this method when execution of some event handler script required. 
            For example when clicked on the node with attribute onclick='callFunc()'.
            </summary>
            <param name="evt"></param>
            <param name="code"></param>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Document.OnHandleNodeScript">
            <summary>
            Called when execution of some code inside attribute event handler requred.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.DocumentScripting">
            <summary>
            Executes scripts for the Document in proper order.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DocumentScripting._eventAttr">
            <summary>
            Map attribute to event (onclick->click, etc...)
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.DocumentScripting.BeforeScriptExecute">
            <summary>
            Faired before running the script.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.DocumentScripting.AfterScriptExecute">
            <summary>
            Faired after running the script.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.DocumentScripting.ScriptExecutionError">
            <summary>
            Faired on script execution error.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.DOMException">
            <summary>
            Represents DOM exception which occurs as a result of calling a method or accessing a property of a web API
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.IndexSizeError">
            <summary>
            The index is not in the allowed range. For example, this can be thrown by Range object. (Legacy code value: 1 and legacy constant name: INDEX_SIZE_ERR) 
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.HierarchyRequestError">
            <summary>
            The node tree hierarchy is not correct. (Legacy code value: 3 and legacy constant name: HIERARCHY_REQUEST_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.WrongDocumentError">
             <summary>
            The object is in the wrong Document. (Legacy code value: 4 and legacy constant name: WRONG_DOCUMENT_ERR) 
             </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.InvalidCharacterError">
            <summary>
            The string contains invalid characters. (Legacy code value: 5 and legacy constant name: INVALID_CHARACTER_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NoModificationAllowedError">
            <summary>
            The object can not be modified. (Legacy code value: 7 and legacy constant name: NO_MODIFICATION_ALLOWED_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NotFoundError">
            <summary>
            The object can not be found here. (Legacy code value: 8 and legacy constant name: NOT_FOUND_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NotSupportedError">
            <summary>
            The operation is not supported. (Legacy code value: 9 and legacy constant name: NOT_SUPPORTED_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.InvalidStateError">
            <summary>
            The object is in an invalid state. (Legacy code value: 11 and legacy constant name: INVALID_STATE_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.SyntaxError">
            <summary>
            The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.InvalidModificationError">
            <summary>
            The object can not be modified in this way. (Legacy code value: 13 and legacy constant name: INVALID_MODIFICATION_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NamespaceError">
            <summary>
            The operation is not allowed by Namespaces in XML. (Legacy code value: 14 and legacy constant name: NAMESPACE_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.InvalidAccessError">
            <summary>
            The object does not support the operation or argument. (Legacy code value: 15 and legacy constant name: INVALID_ACCESS_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.TypeMismatchError">
            <summary>
            The type of the object does not match the expected type. (Legacy code value: 17 and legacy constant name: TYPE_MISMATCH_ERR) This value is deprecated, the JavaScript TypeError exception is now raised instead of a DOMException with this value.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.SecurityError">
            <summary>
            The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NetworkError">
            <summary>
            A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.AbortError">
            <summary>
            The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.URLMismatchError">
            <summary>
            The given URL does not match another URL. (Legacy code value: 21 and legacy constant name: URL_MISMATCH_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.QuotaExceededError">
            <summary>
            The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.TimeoutError">
            <summary>
            The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.InvalidNodeTypeError">
            <summary>
            The node is incorrect or has an incorrect ancestor for this operation. (Legacy code value: 24 and legacy constant name: INVALID_NODE_TYPE_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.DataCloneError">
            <summary>
            The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.EncodingError">
            <summary>
            The encoding or decoding operation failed.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NotReadableError">
            <summary>
            The input/output read operation failed.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.UnknownError">
            <summary>
            The operation failed for an unknown transient reason (e.g. out of memory).
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.ConstraintError">
            <summary>
            A mutation operation in a transaction failed because a constraint was not satisfied.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.DataError">
            <summary>
            Provided data is inadequate.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.TransactionInactiveError">
            <summary>
            A request was placed against a transaction which is currently not active, or which is finished.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.ReadOnlyError">
            <summary>
            The mutating operation was attempted in a "readonly" transaction.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.VersionError">
            <summary>
            An attempt was made to open a database using a lower version than the existing version (No legacy code value and constant name).
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.OperationError">
            <summary>
            The operation failed for an operation-specific reason.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.DOMException.Codes.NotAllowedError">
            <summary>
            The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.DOMException.Code">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.DOMException.Name">
            <summary>
            Error name.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.DomImplementation">
            <summary>
            Providing methods for documents creation.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.DomImplementation.CreateHtmlDocument(System.String)">
            <summary>
            Creates a new HTML <see cref="T:Knyaz.Optimus.Dom.Document"/>.
            </summary>
            <param name="title">Is a string containing the title to give the new HTML document.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.DomImplementation.CreateDocumentType(System.String,System.String,System.String)">
            <summary>
            Creates a DocumentType object.
            </summary>
            <remarks>
            The DocumentType object can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().
            </remarks>
            <param name="qualifiedNameStr">Is a string containing the qualified name, like svg:svg.</param>
            <param name="publicId">Is a string containing the PUBLIC identifier.</param>
            <param name="systemId">Is a string containing the SYSTEM identifiers.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.DomImplementation.CreateDocument(System.String,System.String,Knyaz.Optimus.Dom.Elements.DocType)">
            <summary>
            Creates and returns an <see cref="T:Knyaz.Optimus.Dom.Document"/>.
            </summary>
            <param name="namespaceURI">Is a string containing the namespace URI of the document to be created, or null if the document doesn't belong to one.</param>
            <param name="qualifiedNameStr">Is a string containing the qualified name, that is an optional prefix and colon plus the local root element name, of the document to be created.</param>
            <param name="documentType">Is the DocumentType of the document to be created.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Attr">
            <summary>
            Represents an HTML attribute of an element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Attr.CloneNode(System.Boolean)">
            <summary>
            Creates new copy of this <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> object.
            </summary>
            <param name="deep">Makes no sense.</param>
            <returns>Created <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/>.</returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Attr.NodeName">
            <summary>
            Equals this.Name.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Attr.Name">
            <summary>
            The name of an attribute.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Attr.OwnerElement">
            <summary>
            The element useded to access the attribute.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Attr.Value">
            <summary>
            Sets or gets the value of the attribute.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Attr.IsId">
            <summary>
            <c>true</c> if the attribute is of type Id, otherwise it returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Attr.Specified">
            <summary>
            <c>true</c> if the attribute has been specified, otherwise it returns <c>false</c>.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.AttributesCollection">
            <summary>
            Collection of element attributes.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.AttributesCollection.Item(System.String)">
            <summary>
            Gets or sets <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> object with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.AttributesCollection.Item(System.Int32)">
            <summary>
            Gets <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node at specified position.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.AttributesCollection.Remove(System.String)">
            <summary>
            Removes the attribute with specifeid name.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.CharacterData">
            <summary>
            CharacterData is an abstract interface and does not exist as node. 
            It is used by Text, Comment, and ProcessingInstruction nodes.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.CharacterData.Data">
            <summary>
            The text of this node.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.CharacterData.NodeValue">
            <summary>
            The text of this node.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.CharacterData.Remove">
            <summary>
            Removes this node from parent.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.CharacterData.SubstringData(System.Int32,System.Int32)">
            <summary>
            Returns a string containing the part of <see cref="P:Knyaz.Optimus.Dom.Elements.CharacterData.Data"/> of the specified length and starting at the specified offset.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.CharacterData.AppendData(System.String)">
            <summary>
            Appends the given string to the <see cref="P:Knyaz.Optimus.Dom.Elements.CharacterData.Data"/> string.
            </summary>
            <param name="text">String that specifies the text to insert</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.CharacterData.DeleteData(System.Int32,System.Int32)">
            <summary>
            Removes the specified part of the text content.
            </summary>
            <param name="offset">Integer that specifies the start position of the contents to remove.</param>
            <param name="count">Integer that specifies the number of characters to remove.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.CharacterData.InsertData(System.Int32,System.String)">
            <summary>
            Inserts text content into the current element at the specified position.
            </summary>
            <param name="offset">Integer that specifies the start position of the insertion.</param>
            <param name="text">String that specifies the text to insert.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.CharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the specified part of the text content.
            </summary>
            <param name="start">Integer that specifies start position of the contents to remove.</param>
            <param name="charsToRemove">Integer that specifies the number of characters to remove.</param>
            <param name="text">String that specifies the text to insert.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.CharacterData.Length">
            <summary>
            Returns an integer representing the size of the string contained in <see cref="P:Knyaz.Optimus.Dom.Elements.CharacterData.Data"/>.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Text">
            <summary>
            Represtents the text element in the DOM.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Comment">
            <summary>
            Represtents the comment element in the DOM.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.DocType">
            <summary>
            Represents the doctype element of the DOM.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.DocType.CloneNode(System.Boolean)">
            <summary>
            Creates a copy of this DocType object.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DocType.NodeName">
            <summary>
            The same as <see cref="P:Knyaz.Optimus.Dom.Elements.DocType.Name"/>.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.DocType.ToString">
            <summary>
            Always [Object DocumentType] for the DocType element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DocType.Name">
            <summary>
            A DOMString, eg "html" for &lt;!DOCTYPE HTML&gt;.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DocType.PublicId">
            <summary>
            A string, eg "-//W3C//DTD HTML 4.01//EN", empty string for HTML5.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DocType.SystemId">
            <summary>
            A string, eg "http://www.w3.org/TR/html4/strict.dtd", empty string for HTML5.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.DocType.Remove">
            <summary>
            Removes this doctype from parent document.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.DocumentFragment">
            <summary>
            Represents a minimal document object that has no parent.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DocumentFragment.NodeName">
            <summary>
            Always "#document-fragment".
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.DocumentFragment.CloneNode(System.Boolean)">
            <summary>
            Creates a new copy of the DocumentFragment.
            </summary>
            <param name="deep">Specifies whether or not the child nodes should be clonned too.</param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Element">
            <summary>
            Represents the element of the DOM.
            https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-2004040
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.FirstChild">
            <summary>
            Gets the node's first child in the tree, or null if the node has no children. If the node is a Document, it returns the first node in the list of its direct children.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.LastChild">
            <summary>
            Gets the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.Attributes">
            <summary>
            Returns a collection of the specified node's attributes.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.TagName">
            <summary>
            Get the tag name of an element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.ClassName">
            <summary>
            Sets or gets the value of the 'class' attribute.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.ClassList">
            <summary>
            Returns a live DOMTokenList collection of the class attributes of the element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.Id">
            <summary>
            Represents the element's identifier, reflecting the id global attribute.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.OuterHTML">
            <summary>
            Gets the serialized HTML fragment describing the element including its descendants. 
            It can be set to replace the element with nodes parsed from the given string.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.InnerHTML">
            <summary>
            Sets or gets the serialized HTML describing the element's descendants.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.TextContent">
            <summary>
             Represents the text content of a node and its descendants.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.GetElementsByTagName(System.String)">
            <summary>
            Returns a collection containing all descendant elements with the specified tag name.
            </summary>
            <param name="tagName">A string that specifies the tagname to search for. The value "*" matches all tags</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.GetElementsByClassName(System.String)">
            <summary>
            Returns a collection containing all descendant elements with the specified class name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.GetAttribute(System.String)">
            <summary>
            Retrieves an attribute value by name.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> value as a string, or the string.Empty if that attribute does not have a specified or default value.</returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.OwnerDocument">
            <summary>
            Returns the top-level document object for this node.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.RemoveAttributeNode(Knyaz.Optimus.Dom.Elements.Attr)">
            <summary>
            Removes the specified attribute node.
            </summary>
            <param name="attr">The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node to remove from the attribute list.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.SetAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute. If an attribute with that name is already present in the element, its value is changed to be that of the value parameter.
            </summary>
            <param name="name">The name of the attribute to create or alter.</param>
            <param name="value">Value to set in string form.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.SetAttributeNode(Knyaz.Optimus.Dom.Elements.Attr)">
            <summary>
            Adds a new attribute node. If an attribute with that name (nodeName) is already present in the element, it is replaced by the new one.
            </summary>
            <param name="attr">The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node to add to the attribute list.</param>
            <returns>If the newAttr attribute replaces an existing attribute, the replaced Attr node is returned, otherwise null is returned.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute by name.
            </summary>
            <param name="name">The name of the attribute to remove.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.HasAttribute(System.String)">
            <summary>
            Returns <c>true</c> if the specified attribute exists, otherwise it returns <c>false</c>.
            </summary>
            <param name="name">The name of the attribute to check.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.HasAttributes">
            <summary>
            Indicates whether this node (if it is an element) has any attributes.
            </summary>
            <returns><c>true</c> if this node has any attributes, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.Contains(Knyaz.Optimus.Dom.Interfaces.INode)">
            <summary>
            Checks whether a node is a descendant of a given Element or not.
            </summary>
            <param name="element">The node to search.</param>
            <returns><c>True</c> if node found, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Element.NodeName">
            <summary>
            For an Element the NodeName is tag name.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.GetAttributeNode(System.String)">
            <summary>
            Retrieves an attribute node by name.
            </summary>
            <param name="name">The name (nodeName) of the attribute to retrieve.</param>
            <returns>The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node with the specified name (nodeName) or <c>null</c> if there is no such attribute.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.InsertAdjacentHTML(System.String,System.String)">
             <summary>
             Parses the given string text as HTML or XML and inserts the resulting nodes into the tree in the position given by the position argument, as follows:
            "beforebegin" - Before the element itself.
            "afterbegin" - Just inside the element, before its first child.
            "beforeend" - Just inside the element, after its last child.
            "afterend" - After the element itself.
             </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.QuerySelector(System.String)">
            <summary>
            Returns first descendant element that matches a specified CSS selector(s).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.QuerySelectorAll(System.String)">
            <summary>
            Returns all descendant elements that matches a specified CSS selector(s).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.Closest(System.String)">
            <summary>
            Returns nearest ancestor or itself which satisfies to specified selector.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.GetBoundingClientRect">
            <summary>
            Returns the size of an element and its position relative to the viewport.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Element.Remove">
            <summary>
            Removes this node from its parent.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Bottom">
            <summary>
            Y-coordinate, relative to the viewport origin, of the bottom of the rectangle box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Height">
            <summary>
            Height of the rectangle box (This is identical to bottom minus top).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Left">
            <summary>
            X-coordinate, relative to the viewport origin, of the left of the rectangle box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Right">
            <summary>
            X-coordinate, relative to the viewport origin, of the right of the rectangle box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Top">
            <summary>
            Y-coordinate, relative to the viewport origin, of the top of the rectangle box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Width">
            <summary>
            Width of the rectangle box (This is identical to right minus left).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.X">
            <summary>
            X-coordinate, relative to the viewport origin, of the left of the rectangle box.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.DomRect.Y">
            <summary>
            Y-coordinate, relative to the viewport origin, of the top of the rectangle box.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.EventTarget">
            <summary>
            Implements logic for event propogation and handling.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.EventTarget.#ctor(System.Object,System.Func{Knyaz.Optimus.Dom.Interfaces.IEventTarget})">
            <summary>
            Creates new EventTarget.
            </summary>
            <param name="target">The html node or Window object this event target attached to.</param>
            <param name="getParent">The function to get event target of parent element.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.EventTarget.#ctor(System.Object,System.Func{Knyaz.Optimus.Dom.Interfaces.IEventTarget},System.Func{System.Object})">
            <summary>
            Creates new EventTarget.
            </summary>
            <param name="target">The html node or Window object this event target attached to.</param>
            <param name="getParent">The function to get event target of parent element.</param>
            <param name="getLockObject">The function to get sync object.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.EventTarget.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},Knyaz.Optimus.Dom.Interfaces.EventListenerOptions)">
            <summary>
            Registers new event handler.
            </summary>
            <param name="type">The type name of the event.</param>
            <param name="handler">The event handler.</param>
            <param name="options">An options object that specifies characteristics about the event listener. </param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.EventTarget.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},System.Boolean)">
            <summary>
            Registers new event handler.
            </summary>
            <param name="type">The type name of the event.</param>
            <param name="handler">The event handler.</param>
            <param name="useCapture">If <c>true</c> the handler invoked in 'capturing' order, 
            othervise in the handler invoked in 'bubbling' order.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.EventTarget.RemoveEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},System.Boolean)">
            <summary>
            Removes previously registered event handler.
            </summary>
            <param name="type">The type name of event.</param>
            <param name="handler">The handler to be removed.</param>
            <param name="useCapture">The invocation order to be handler removed from.</param>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.EventTarget.HandlerException">
            <summary>
            Called when exception in handler occured.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.EventTarget.BeforeEventDispatch">
            <summary>
            Called before the event dispatched.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.EventTarget.CallDirectEventSubscribers">
            <summary>
            Call element's event handlers attached using attribute or property (like 'onclick' and etc.).
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.EventTarget.AfterEventDispatch">
            <summary>
            Called after the event dispatched.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.EventTarget.DispatchEvent(Knyaz.Optimus.Dom.Events.Event)">
            <summary>
            Dispatches an event.
            </summary>
            <param name="evt">The event to be dispatched.</param>
            <returns><c>False</c> if event was cancelled.</returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Head">
            <summary>
            Represents &lt;HEAD&gt; element.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlBodyElement">
            <summary>
            Represents &lt;BODY&gt; element.
            http://www.w3.org/TR/html-markup/body.html#body
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.HtmlBodyElement.OnLoad">
            <summary>
            Fired immediately after a page has been loaded.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlBodyElement.CallDirectEventSubscribers(Knyaz.Optimus.Dom.Events.Event)">
            <summary>
            Additional handling of 'onload' event.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlBrElement">
            <summary>
            Represents &lt;BR&gt; HTML element.
            https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLBRElement.html
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlBrElement.Clear">
            <summary>
            Gets or sets the 'clear' attribute value that specifies where the next line should appear in a 
            visual browser after the line break caused by this element. 
            </summary>
            <remarks>Values: none|left|right|all</remarks>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlButtonElement">
            <summary>
            Represents a &lt;BUTTON&gt; HTML element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Type">
            <summary>
            Is a string indicating the behavior of the button. This is an enumerated attribute with the following possible values:
            "submit": The button submits the form. This is the default value if the attribute is not specified, HTML5 or if it is dynamically changed to an empty or invalid value.
            "reset": The button resets the form.
            "button": The button does nothing.
            "menu": The button displays a menu.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Value">
            <summary>
            Gets or sets 'value' attribute value representing the current form control value of the button.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Disabled">
            <summary>
            Gets or sets 'disabled' attribute value indicating whether or not the control is disabled, meaning that it does not accept any clicks.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Name">
            <summary>
            Gets or sets 'name' attribute value representing the name of the object when submitted with a form. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.AccessKey">
            <summary>
            Gets or sets 'accessKey' attribute value that is a String indicating the single-character keyboard key to give access to the button.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.TabIndex">
            <summary>
            Gets or sets 'tabIndex' attribute value that represents this element's position in the tabbing order.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Form">
            <summary>
            Is a <see cref="T:Knyaz.Optimus.Dom.Elements.HtmlFormElement"/> reflecting the form that this button is associated with.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.FormAction">
            <summary>
            Gets or sets a string reflecting the URI of a resource that processes information submitted by the button. If specified, this attribute overrides the action attribute of the &lt;form&gt; element that owns this element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.FormMethod">
            <summary>
            Gets or sets the 'formMethod' attribute reflecting the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the &lt;form&gt; element that owns this element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.FormEnctype">
            <summary>
            Gets or sets the 'formEnctype' attribute reflecting the type of content that is used to submit the form to the server.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.FormTarget">
            <summary>
            Gets or sets the 'formTarget' attribute reflecting a name or keyword indicating where to display the response that is received after submitting the form.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Autofocus">
            <summary>
            Is a Boolean indicating whether or not the control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlButtonElement.Labels">
            <summary>
            Gets a collection containing the &lt;label&gt; elements associated with the &lt;button&gt; element.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlCollection">
            <summary>
            Represents readonly colletion of html elements.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlDivElement">
            <summary>
            Represents &lt;DIV&gt; HTML element.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlElement">
            <summary>
            The base class for the classes representing html elemenets.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlElement.Hidden">
            <summary>
            Gets or sets the 'hidden' attribute value, indicating if the element is hidden or not.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlElement.Click">
            <summary>
            Sends a mouse click event to the element.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.HtmlElement.OnClick">
            <summary>
            Called before the mouse 'click' dispatched.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlElement.Style">
            <summary>
            Gets a CssStyleDeclaration whose value represents the declarations specified in the attribute, if present. 
            </summary>
            <remarks>
            Mutating the CssStyleDeclaration object must create a style attribute on the element (if there isn't one 
            already) and then change its value to be a value representing the serialized form of the CSSStyleDeclaration
             object. The same object must be returned each time.
            </remarks>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlElement.Blur">
            <summary>
            Removes keyboard focus from the current element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlElement.Focus">
            <summary>
            Sets keyboard focus on the specified element, if it can be focused.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlFormElement">
            <summary>
            Represents &lt;FORM&gt; element.
            http://www.w3.org/TR/html5/forms.html"
            https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement"
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Name">
            <summary>
            Gets or sets the 'name' attribute value reflecting the value of the form's name HTML attribute, containing the name of the form.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Method">
            <summary>
            Gets or sets the 'method' attribute value reflecting the value of the form's method HTML attribute, indicating the HTTP method used to submit the form. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.AcceptCharset">
            <summary>
            Character encodings to use for form submission
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Action">
            <summary>
            URL to use for form submission
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Autocomplete">
            <summary>
            Default setting for autofill feature for controls in the form
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Enctype">
            <summary>
            Form data set encoding type to use for form submission. One of three below: 
            <c>application/x-www-form-urlencoded</c>Default. All characters are encoded before sent (spaces are converted to "+" symbols, and special characters are converted to ASCII HEX values)
            <c>multipart/form-data</c>	No characters are encoded. This value is required when you are using forms that have a file upload control
            <c>text/plain</c>	Spaces are converted to "+" symbols, but no special characters are encoded
            Note: The enctype attribute can be used only if method=<c>post</c>.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Encoding">
            <summary>
            Gets or sets the 'encoding' attribute value reflecting the value of the form's enctype HTML 
            attribute, indicating the type of content that is used to transmit the form to the server.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Target">
            <summary>
            Browsing context for form submission
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Elements">
            <summary>
            return an HTMLFormControlsCollection rooted at the Document node while the form element is in a Document 
            and rooted at the form element itself when it is not, whose filter matches listed elements whose form owner 
            is the form element, with the exception of input elements whose type attribute is in the Image Button state, 
            which must, for historical reasons, be excluded from this particular collection.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Reset">
            <summary>
            Resets the form to its initial state.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlFormElement.Submit">
            <summary>
            Submits the form to the server.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.HtmlFormElement.OnSubmit">
            <summary>
            Called on form submit.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlHtmlElement">
            <summary>
            Represents &lt;HTML&gt; element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlHtmlElement.InnerHTML">
            <summary>
            Gets or sets inner html of the 'HTML' element.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlIFrameElement">
            <summary>
            Represents &lt;IFRAME&gt; element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlIFrameElement.Align">
            <summary>
            Gets or sets the 'align' attribute value that specifies the alignment of the frame with respect to the surrounding context.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlIFrameElement.LongDesc">
            <summary>
            URI [IETF RFC 2396] designating a long description of this image or frame
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlIFrameElement.Name">
            <summary>
            Gets or sets the 'name' attribute value that reflects the name HTML attribute, containing a name by which to refer to the frame.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlIFrameElement.Src">
            <summary>
            The src attribute gives the address of a page that the iframe is to contain.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlIFrameElement.ContentDocument">
            <summary>
            The document this frame contains, if there is any and it is available, or null otherwise.
            todo: implement document loading
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlImageElement">
            <summary>
            The HTMLImageElement interface provides special properties and methods  for manipulating the layout and presentation of &lt;img&gt; elements.
            Specs: https://www.w3.org/TR/2011/WD-html5-author-20110705/the-img-element.html#attr-img-ismap
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.Alt">
            <summary>
            Reflects 'alt' attribute value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.UseMap">
            <summary>
            Reflects 'usemap' attribute value that if present, can indicate that the image has an associated.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.IsMap">
            <summary>
            Reflects 'ismap' attribute value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.Src">
            <summary>
            Is a String that reflects the src HTML attribute, containing the full URL of the image including base URI.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.Width">
            <summary>
            Reflects the 'width' HTML attribute, indicating the rendered width of the image in CSS pixels.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.Height">
            <summary>
            Reflects the 'height' HTML attribute, indicating the rendered height of the image in CSS pixels.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.NaturalWidth">
            <summary>
            The intrinsic width of the image in CSS pixels, if it is available; else, it shows 0.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.NaturalHeight">
            <summary>
            The intrinsic height of the image in CSS pixels, if it is available; else, it shows 0.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlImageElement.Complete">
            <summary>
            Returns a Boolean that is true if the browser has finished fetching the image, whether successful or not. It also shows true, if the image has no src value
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.HtmlImageElement.OnLoad">
            <summary>
            Fired immediately after an element has been loaded.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlInputElement">
            <summary>
            http://www.w3.org/TR/html-markup/input.text.html
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Form">
            <summary>
            Is a <see cref="T:Knyaz.Optimus.Dom.Elements.HtmlFormElement"/> reflecting the form that this button is associated with.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Name">
            <summary>
            Gets or sets the 'name' attribute value reflecting the value of the form's name HTML attribute, containing the name of the form.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Autocomplete">
            <summary>
            Specifies whether or not an input field should have autocomplete enabled. Available values: "on"|"off".
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Value">
            <summary>
            Gets or sets current value of the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Disabled">
            <summary>
            Gets or sets the element's disabled attribute, indicating that the control is not available for interaction.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Type">
            <summary>
            Gets or sets the element's type attribute, indicating the type of control to display.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Readonly">
            <summary>
            Gets or sets the element's readonly attribute, indicating that the user cannot modify the value of the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Required">
            <summary>
            Gets or sets the element's required attribute, indicating that the user must fill in a value before submitting a form.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Checked">
            <summary>
            Gets or sets the current state of the element when type is checkbox or radio.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Max">
            <summary>
             Gets or sets the element's max attribute, containing the maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Min">
            <summary>
            Gets or sets the element's min attribute, containing the minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Step">
            <summary>
            Gets or sets the element's step attribute, which works with min and max to limit the increments at which a numeric or date-time value can be set. It can be the string any or a positive floating point number.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlInputElement.StepUp">
            <summary>
            Increments the value by <see cref="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Step"/>.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlInputElement.StepUp(System.Int64)">
            <summary>
            Increments the value by (<see cref="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Step"/> * n), where n defaults to 1 if not specified.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlInputElement.StepDown">
            <summary>
            Dencrements the value by <see cref="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Step"/>.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlInputElement.StepDown(System.Int64)">
            <summary>
            Dencrements the value by (<see cref="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.Step"/> * n), where n defaults to 1 if not specified.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlInputElement.ValueAsNumber">
            <summary>
            Returns the value of the element, interpreted as one of the following, in order:
            a time value
            a number
            NaN if conversion is impossible
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlLabelElement">
            <summary>
            Reflects 'label' html element
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLabelElement.HtmlFor">
            <summary>
            Gets or sets 'for' attribute value that represents id of the labeled element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLabelElement.Form">
            <summary>
            Is a HtmlFormElement object representing the form with which the labeled control is associated, or null if there is no associated control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLabelElement.Control">
            <summary>
            Is a HtmlElement representing the control with which the label is associated.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlLinkElement">
            <summary>
            The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.
            https://www.w3.org/TR/html5/document-metadata.html#the-link-element
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Media">
            <summary>
            Gets or sets a list of one or more media formats to which the resource applies.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Href">
            <summary>
            Gets or sets the URI for the target resource.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Type">
            <summary>
            Gets or sets the MIME type of the linked resource
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Disabled">
            <summary>
            Gets or sets whether the link is disabled; currently only used with style sheet links.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Hreflang">
            <summary>
            Gets or sets the language code for the linked resource.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Charset">
            <summary>
            Gets or sets the character encoding for the target resource.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Rel">
            <summary>
            Gets or sets the forward relationship of the linked resource from the document to the resource.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Rev">
            <summary>
            Gets or sets the reverse relationship of the linked resource from the resource to the document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlLinkElement.Target">
            <summary>
            Gets or sets the name of the target frame to which the resource applies.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlOptGroupElement">
            <summary>
            Represents &lt;optgroup&gt; html element.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlOptionElement">
            <summary>
            Represents &lt;OPTION&gt; element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.Name">
            <summary>
            Gets or sets the 'name' attribute value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.Value">
            <summary>
            Reflects the value of the value HTML attribute, if it exists; otherwise reflects value of the Node.textContent property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.Text">
            <summary>
            Contains the text content of the element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.Selected">
            <summary>
            Indicates whether the option is currently selected.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.Disabled">
            <summary>
            Gets or sets 'disabled' attribute value indicating whether or not the control is disabled, meaning that it does not accept any clicks.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.Form">
            <summary>
            Is a <see cref="T:Knyaz.Optimus.Dom.Elements.HtmlFormElement"/> reflecting the form that this option is associated with.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionElement.DefaultSelected">
            <summary>
            Contains the initial value of the selected HTML attribute, indicating whether the option is selected by default or not.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlSelectElement">
            <summary>
            Represents &lt;SELECT&gt; HTML element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.AppendChild(Knyaz.Optimus.Dom.Elements.Node)">
            <summary>
            Adds new 'OPTION' nodes to the dropdown. Other nodes types are ignored.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Add(Knyaz.Optimus.Dom.Elements.HtmlOptionElement,Knyaz.Optimus.Dom.Elements.HtmlOptionElement)">
            <summary>
            Adds an element to the collection of option elements for this select element.
            </summary>
            <param name="option">The element to be added.</param>
            <param name="before">An element of the collection, should be inserted before.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Add(Knyaz.Optimus.Dom.Elements.HtmlOptionElement,System.Int64)">
            <summary>
            Adds an element to the collection of option elements for this select element.
            </summary>
            <param name="option">The element to be added.</param>
            <param name="index">The index, representing the item item should be inserted before.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Remove(System.Int32)">
            <summary>
            Removes the option from specified position.
            </summary>
            <param name="index">Position of option to be removed.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Length">
            <summary>
            The number of &lt;option&gt; elements in this select element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Options">
            <summary>
            Gets an options collection of this select element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Multiple">
            <summary>
            Reflects the multiple HTML attribute, indicating whether multiple items can be selected.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Type">
            <summary>
            The form control's type. When multiple is true, it returns "select-multiple"; otherwise, it returns "select-one".
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Value">
            <summary>
            Gets the first selected option or <c>null</c> if nothing have been selected.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.SelectedOptions">
            <summary>
            Gets a collection of selected options.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Name">
            <summary>
            Gets or sets the 'name' attribute, used by servers and DOM search functions.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.SelectedIndex">
            <summary>
            Gets the index of the first selected &lt;option&gt; element. The value -1 indicates no element is selected.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlSelectElement.Form">
            <summary>
            Is a <see cref="T:Knyaz.Optimus.Dom.Elements.HtmlFormElement"/> reflecting the form that this button is associated with.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlOptionsCollection">
            <summary>
            Represents collection of 'option' elements inside 'select'.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlOptionsCollection.Item(System.Int32)">
            <summary>
            Gets the specific node at the given zero-based index (gives null if out of range).
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlOptionsCollection.NamedItem(System.String)">
            <summary>
            Searches the specific node with the given name. Returns null if no such named node exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlOptionsCollection._Item(System.Object)">
            <summary>
            Gets a node by specified name or index.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlStyleElement">
            <summary>
            Represents DOM node for STYLE element. https://www.w3.org/TR/html5/document-metadata.html
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlStyleElement.Type">
            <summary>
            Type of embedded resource. Value must be a valid MIME type that designates a styling language.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlStyleElement.Media">
            <summary>
            Applicable media
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlStyleElement.Disabled">
            <summary>
            Gets or sets the 'disabled' attribute value.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTableCaptionElement">
            <summary>
            Represents 'caption' tag in table.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCaptionElement.Align">
            <summary>
            Gets or sets 'align' attribute value.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement">
            <summary>
            https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLTableCellElement.html
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Abbr">
            <summary>
            Abbreviation for header cells.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Align">
            <summary>
            Horizontal alignment of data in cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Axis">
            <summary>
            Names group of related headers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.BgColor">
            <summary>
            Cell background color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.CellIndex">
            <summary>
            The index of this cell in the row, starting from 0.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Ch">
            <summary>
            Alignment character for cells in a column.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.ChOff">
            <summary>
            Offset of alignment character.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.ColSpan">
            <summary>
            Number of columns spanned by cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Headers">
            <summary>
            List of id attribute values for header cells.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Height">
            <summary>
            Cell height.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.NoWrap">
            <summary>
            Suppress word wrapping.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.RowSpan">
            <summary>
            Number of rows spanned by cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Scope">
            <summary>
            Scope covered by header cells.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.VAlign">
            <summary>
            Vertical alignment of data in cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableCellElement.Width">
            <summary>
            Cell width.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTableColElement">
            <summary>
            https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLTableColElement.html
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableColElement.Align">
            <summary>
            Gets or sets 'align' attribute value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableColElement.Ch">
            <summary>
            Alignment character for cells in a column.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableColElement.ChOff">
            <summary>
            Offset of alignment character.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableColElement.Span">
            <summary>
            Vertical alignment of data in cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableColElement.VAlign">
            <summary>
            Vertical alignment of data in cell.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableColElement.Width">
            <summary>
            Cell width.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTableElement">
            <summary>
            Represents &lt;TABLE&gt; element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.CreateCaption">
            <summary>
            Create a new table caption object or return an existing one.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.CreateTFoot">
            <summary>
            Create a table footer row or return an existing one.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.CreateTHead">
            <summary>
            Create a table header row or return an existing one.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.DeleteCaption">
            <summary>
            Delete the table caption, if one exists.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.DeleteRow(System.Int32)">
            <summary>
            Delete a table row.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.DeleteTFoot">
            <summary>
            Delete the footer from the table, if one exists.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.DeleteTHead">
            <summary>
            Delete the header from the table, if one exists.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Align">
            <summary>
            Specifies the table's position with respect to the rest of the document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.BgColor">
            <summary>
            Cell background color.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Border">
            <summary>
            The width of the border around the table.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Caption">
            <summary>
            Returns the table's CAPTION, or void if none exists.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.CellPadding">
            <summary>
            Specifies the horizontal and vertical space between cell content and cell borders.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.CellSpacing">
            <summary>
            Specifies the horizontal and vertical separation between cells.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Frame">
            <summary>
            Specifies which external table borders to render. One of:void|above|below|hsides|lhs|rhs|vsides|box|border
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Rows">
            <summary>
            Returns a collection of all the rows in the table, including all in THEAD, TFOOT, all TBODY elements.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Rules">
            <summary>
            Specifies which internal table borders to render. On of:none|groups|rows|cols|all
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Summary">
            <summary>
            Description about the purpose or structure of a table.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.TBodies">
            <summary>
            Returns a collection of the table bodies(including implicit ones).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.TFoot">
            <summary>
            Returns the table's TFOOT, or null if none exists.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.THead">
            <summary>
            Returns the table's THEAD, or null if none exists.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableElement.Width">
            <summary>
            Specifies the desired table width.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.InsertRow">
            <summary>
            Append row at end
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableElement.InsertRow(System.Int32)">
            <summary>
            Insert a new empty row in the table.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement">
            <summary>
            https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLTableRowElement.html
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.DeleteCell(System.Int32)">
            <summary>
            Delete a cell from the current row.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.Align">
            <summary>
            Horizontal alignment of data within cells of this row.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.BgColor">
            <summary>
            Background color for rows.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.Cells">
            <summary>
            The collection of cells in this row.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.Ch">
            <summary>
            Alignment character for cells in a column.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.ChOff">
            <summary>
            Offset of alignment character.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.RowIndex">
            <summary>
            This is in logical order and not in document order.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.SectionRowIndex">
            <summary>
            The index of this row, relative to the current section ( THEAD, TFOOT, or TBODY), starting from 0.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.VAlign">
            <summary>
            Vertical alignment of data within cells of this row.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableRowElement.InsertCell(System.Int32)">
            <summary>
            Insert an empty TD cell into this row.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement">
            <summary>
            The THEAD, TFOOT, and TBODY elements.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.DeleteRow(System.Int32)">
            <summary>
            Delete a row from this section.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.Align">
            <summary>
            Horizontal alignment of data in cells.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.Ch">
            <summary>
            Alignment character for cells in a column.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.ChOff">
            <summary>
            Offset of alignment character.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.Rows">
            <summary>
            The collection of rows in this table section.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.VAlign">
            <summary>
            Vertical alignment of data in cells.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTableSectionElement.InsertRow(System.Int32)">
            <summary>
            Insert a row into this section.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement">
            <summary>
            Represents textarea html element (see http://www.w3.org/TR/html5/forms.html#the-textarea-element).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Autofocus">
            <summary>
            Gets or sets the element's autofocus attribute, indicating that the control should have input focus when the page loads.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Cols">
            <summary>
            Gets or sets the element's cols attribute, indicating the visible width of the text area.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Rows">
            <summary>
            Gets or sets the element's rows attribute, indicating the number of visible text lines for the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Disabled">
            <summary>
            Gets or sets the element's disabled attribute, indicating that the control is not available for interaction.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Required">
            <summary>
            Gets or sets the element's required attribute, indicating that the user must specify a value before submitting the form.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.ReadOnly">
            <summary>
            Gets or sets the element's readonly attribute, indicating that the user cannot modify the value of the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Placeholder">
            <summary>
            Gets or sets the element's placeholder attribute, containing a hint to the user about what to enter in the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Value">
            <summary>
            Gets or sets the raw value contained in the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.MaxLength">
            <summary>
            Gets or sets the element's maxlength attribute, indicating the maximum number of characters the user can enter. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.MinLength">
            <summary>
            Gets or sets the element's minlength attribute, indicating the minimum number of characters the user can enter. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Name">
            <summary>
            Gets or sets the element's name attribute, containing the name of the control.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Wrap">
            <summary>
            Gets or sets the wrap HTML attribute, indicating how the control wraps text.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.DefaultValue">
            <summary>
            Gets or sets the control's default value, which behaves like the Node.textContent property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.TextLength">
            <summary>
            Gets the length of the control's value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.Form">
            <summary>
            Returns a reference to the parent form element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement.ToString">
            <summary>
            Returns "[object HTMLTextAreaElement]".
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.HtmlUnknownElement">
            <summary>
            Represents custom tag in html document.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Node">
            <summary>
            http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1950641247
            </summary>
            <inheritdoc cref="T:Knyaz.Optimus.Dom.Interfaces.INode"/>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.ChildNodes">
            <summary>
            Gets a live collection of child nodes of the given element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.RemoveChild(Knyaz.Optimus.Dom.Elements.Node)">
            <summary>
            Removes a child node from the DOM.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>The removed node.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.InsertBefore(Knyaz.Optimus.Dom.Elements.Node,Knyaz.Optimus.Dom.Elements.Node)">
            <summary>
            Inserts a node before the reference node as a child of a specified parent node. 
            If the given child is a reference to an existing node in the document, the method moves it from its current position to the new position.
            If the reference node is null, the specified node is added to the end of the list of children of the specified parent node.
            If the given child is a DocumentFragment, the entire contents of the DocumentFragment are moved into the child list of the specified parent node.
            </summary>
            <param name="newChild"></param>
            <param name="refNode"></param>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.HasChildNodes">
            <summary>
            Indicating whether the current Node has child nodes or not.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.ReplaceChild(Knyaz.Optimus.Dom.Elements.Node,Knyaz.Optimus.Dom.Elements.Node)">
            <summary>
            Replaces one child node of the specified node with another.
            </summary>
            <param name="newChild">The node to be added.</param>
            <param name="oldChild">The node to be removed</param>
            <returns>The removed node.</returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.FirstChild">
            <summary>
            Gets the node's first child in the tree, or null if the node has no children. If the node is a Document, it returns the first node in the list of its direct children.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.LastChild">
            <summary>
            Gets the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.NextSibling">
            <summary>
            Gets the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.PreviousSibling">
            <summary>
            Gets the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.ParentNode">
            <summary>
            Gets the parent of the specified node in the DOM tree.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.CloneNode">
            <summary>
            Creates a duplicate of the node on which this method was called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.CloneNode(System.Boolean)">
            <summary>
            Creates a duplicate of the node on which this method was called.
            </summary>
            <param name="deep">If <c>true</c> the children of the node will also be cloned.</param>
            <returns>Newly created node.</returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Node.NodeName">
            <summary>
            Gets name of the current node as a string.
            The returned values for different types of nodes are:
            Attribute - The value of Attr.name
            CDATASection - "#cdata-section"
            Comment - "#comment"
            Document - "#document"
            DocumentFragment - "#document-fragment"
            DocumentType - The value of DocumentType.name
            Element - The value of Element.tagName
            Entity - The entity name
            EntityReference - The name of entity reference
            Notation - The notation name
            ProcessingInstruction - The value of ProcessingInstruction.target
            Text - "#text"
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.ELEMENT_NODE">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node._NODE">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.TEXT_NODE">
            <summary>
            3
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.CDATA_SECTION_NODE">
            <summary>
            4
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.ENTITY_REFERENCE_NODE">
            <summary>
            5
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.ENTITY_NODE">
            <summary>
            6
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.PROCESSING_INSTRUCTION_NODE">
            <summary>
            7
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.COMMENT_NODE">
            <summary>
            8
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.DOCUMENT_NODE">
            <summary>
            9
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.DOCUMENT_TYPE_NODE">
            <summary>
            10
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.DOCUMENT_FRAGMENT_NODE">
            <summary>
            11
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Elements.Node.NOTATION_NODE">
            <summary>
            12
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},Knyaz.Optimus.Dom.Interfaces.EventListenerOptions)">
            <summary>
            Registers new event handler.
            </summary>
            <param name="type">The type name of the event.</param>
            <param name="listener">The event handler.</param>
            <param name="options">An options object that specifies characteristics about the event listener. </param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event})">
            <summary>
            Registers new event handler in 'bubbling' order.
            </summary>
            <param name="type">The type name of the event.</param>
            <param name="listener">The event handler.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},System.Boolean)">
            <summary>
            Registers new event handler.
            </summary>
            <param name="type">The type name of the event.</param>
            <param name="listener">The event handler.</param>
            <param name="useCapture">If <c>true</c> the handler invoked in 'capturing' order, 
            othervise in the handler invoked in 'bubbling' order.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.RemoveEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event})">
            <summary>
            Removes previously registered event handler from 'bubbling' order handlers list.
            </summary>
            <param name="type">The type name of event.</param>
            <param name="listener">The handler to be removed.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.RemoveEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},Knyaz.Optimus.Dom.Interfaces.EventListenerOptions)">
            <summary>
            Removes previously registered event handler.
            </summary>
            <param name="type">The type name of event.</param>
            <param name="listener">The handler to be removed.</param>
            <param name="options">The options with which the listener was added.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.RemoveEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},System.Boolean)">
            <summary>
            Removes previously registered event handler.
            </summary>
            <param name="type">The type name of event.</param>
            <param name="listener">The handler to be removed.</param>
            <param name="useCapture">The invocation order to be handler removed from.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.DispatchEvent(Knyaz.Optimus.Dom.Events.Event)">
            <summary>
            This method allows the dispatch of events into the implementations event model. 
            Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation. The target of the event is the EventTarget on which dispatchEvent is called.
            </summary>
            <returns> If preventDefault was called the value is false, else the value is true.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Node.CompareDocumentPosition(Knyaz.Optimus.Dom.Elements.Node)">
             <summary>
             1: No relationship, the two nodes do not belong to the same document.
            2: The first node (p1) is positioned after the second node (p2).
            4: The first node (p1) is positioned before the second node (p2).
            8: The first node (p1) is positioned inside the second node (p2).
            16: The second node (p2) is positioned inside the first node (p1).
            32: No relationship, or the two nodes are two attributes on the same element.
            Note: The return value could also be a combination of values. I.e. the returnvalue 20 means that p2 is inside p1 (16) AND p1 is positioned before p2 (4).
             </summary>
             <param name="node"></param>
             <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.Script">
            <summary>
            Represents &lt;SCRIPT&gt; element.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Script.Charset">
            <summary>
            Gets or sets the 'charset' attribute value reflecting the charset attribute.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Script.Async">
            <summary>
            Gets or sets 'async' attribute value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Script.Defer">
            <summary>
            Gets or sets 'defer' attribute value.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Script.Src">
            <summary>
            Gets or sets 'src' attirbute representing the address of the external script resource to use. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Script.Type">
            <summary>
            Gets or sets 'type' attribute value representing MIME type of the script.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Elements.Script.Executed">
            <summary>
            Indicates whether the script was executed or not.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.Elements.Script.OnLoad">
            <summary>
            Fired immediately after an element has been loaded.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Script.CloneNode(System.Boolean)">
            <summary>
            Creates new copy of the script node.
            </summary>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.Script.ToString">
            <summary>
            [Object HTMLScriptElement]
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.ITokenList">
            <summary>
            https://www.w3.org/TR/dom/#domtokenlist
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Elements.TokenList">
            <summary>
            Tokens list with lazy evaluation.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.WindowTimers.SetTimeout(System.Action{System.Object[]},System.Int32,System.Object[])">
            <summary>
            Call handler once
            </summary>
            <param name="handler"></param>
            <param name="timeout"></param>
            <param name="ctx">The data objects passed to callback function.</param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Elements.WindowTimers.SetInterval(System.Action{System.Object[]},System.Int32,System.Object[])">
            <summary>
            Call handler periodically
            </summary>
            <param name="handler"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.CustomEvent">
            <summary>
            Represents events initialized by an application for any purpose.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.CustomEvent.Detail">
            <summary>
            Any data passed when initializing the event.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.CustomEvent.InitCustomEvent(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Initializes a CustomEvent object. If the event has already being dispatched, this method does nothing.
            </summary>
            <param name="type">The name of the event.</param>
            <param name="canBubble">Specifies whether the event bubbles up through the DOM or not.</param>
            <param name="canCancel">Specifies whether the event is cancelable.</param>
            <param name="detail">The data to be accessible by <see cref="P:Knyaz.Optimus.Dom.Events.CustomEvent.Detail"/> property.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.ErrorEvent">
            <summary>
            Represents events providing information related to errors in scripts or in files.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ErrorEvent.Message">
            <summary>
            Gets a human-readable error message describing the problem.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ErrorEvent.Filename">
            <summary>
            Gets the name of the script file in which the error occurred.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ErrorEvent.Lineno">
            <summary>
            Gets the line number of the script file on which the error occurred.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ErrorEvent.Colno">
            <summary>
            Gets the column number of the script file on which the error occurred.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ErrorEvent.Error">
            <summary>
            Gets the Object that is concerned by the event.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.ErrorEvent.ErrorEventInit(System.String,System.String,System.UInt64,System.UInt64,System.Object)">
            <summary>
            Initializes the event with a given values.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.Event">
            <summary>
            Represents the any event occured in the DOM.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.Type">
            <summary>
            The name of the event (case-insensitive).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.Target">
            <summary>
            A reference to the target to which the event was originally dispatched.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.OriginalTarget">
            <summary>
            The original target of the event before any retargetings.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.CurrentTarget">
            <summary>
            A reference to the currently registered target for the event.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.EventPhase">
            <summary>
            The phase of the event flow is being processed. 
            Possible values: <see cref="F:Knyaz.Optimus.Dom.Events.Event.AT_TARGET"/>, <see cref="F:Knyaz.Optimus.Dom.Events.Event.BUBBLING_PHASE"/> and <see cref="F:Knyaz.Optimus.Dom.Events.Event.CAPTURING_PHASE"/>.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.Bubbles">
            <summary>
            Indicates whether the event bubbles up through the DOM or not.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.Cancelable">
            <summary>
            Indicates whether the event is cancelable.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.Event.TimeStamp">
            <summary>
            The time at which the event was created (in milliseconds, elapsed from the beginning of the current document's lifetime).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.Event.#ctor(System.String,Knyaz.Optimus.Dom.Document)">
            <summary>
            Creates the new event with the specified type.
            </summary>
            <param name="type">Event type.</param>
            <param name="owner">Parent document.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.Event.StopPropagation">
            <summary>
            Prevents further propagation of the current event in the capturing and bubbling phases.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.Event.PreventDefault">
            <summary>
            Cancels the event (if it is cancelable).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.Event.InitEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.
            </summary>
            <param name="type">Defines the type of event.</param>
            <param name="canBubble">Specifies whether the event should bubble up through the event chain or not.</param>
            <param name="canCancel">Specifies whether the event can be canceled.</param>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Events.Event.CAPTURING_PHASE">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Events.Event.AT_TARGET">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Events.Event.BUBBLING_PHASE">
            <summary>
            3
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.KeyboardEvent">
            <summary>
            Describes a user interaction with the keyboard.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.KeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,Knyaz.Optimus.Environment.Window,System.String,System.String,System.UInt64,System.String,System.Boolean)">
            <summary>
            Initializes the keyboard event.
            </summary>
            <param name="type">The type of keyboard event (one of keydown, keypress, or keyup).</param>
            <param name="canBubble">Whether or not the event can bubble.</param>
            <param name="cancellable">Whether or not the event can be canceled.</param>
            <param name="view">The Window it is associated to.</param>
            <param name="charArg">The value of the char attribute.</param>
            <param name="key">The value of the key attribute.</param>
            <param name="location">The value of the location attribute.</param>
            <param name="modifiers">A whitespace-delineated list of modifier keys (like 'Control' , 'Shift', etc) that should be considered to be active on the event's key</param>
            <param name="repeat">The value of the repeat attribute.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.Key">
            <summary>
            Gets the key value of the key represented by the event.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.Code">
            <summary>
            Gets the code value of the key represented by the event.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.Location">
            <summary>
            Returns a number representing the location of the key on the keyboard or other input device.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.CtrlKey">
            <summary>
            Returns <c>true</c> if the Ctrl key was active when the key event was generated.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.ShiftKey">
            <summary>
            Returns <c>true</c> if the Shift key was active when the key event was generated.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.AltKey">
            <summary>
            Returns <c>true</c> if the Alt key was active when the key event was generated.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.MetaKey">
            <summary>
            Returns <c>true</c> if the Meta(windows/command) key was active when the key event was generated.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.Repeat">
            <summary>
            Returns <c>true</c> if the key is being held down such that it is automatically repeating.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.KeyboardEvent.IsComposing">
            <summary>
            Returns <c>true</c> if the event is fired between after compositionstart and before compositionend.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.KeyboardEvent.GetModifierState(System.String)">
            <summary>
            Returns a bool indicating if the modifier key, like Alt, Shift, Ctrl, or Meta, was pressed.
            </summary>
            <param name="key">A modifier key.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.MutationEvent">
            <summary>
            Represents DOM changes event.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.ProgressEvent">
            <summary>
            Represents events measuring progress of an underlying process, like an HTTP request 
            (for an XMLHttpRequest, or the loading of the underlying resource of an &lt;img&gt;, &lt;audio&gt; and other).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ProgressEvent.LengthComputable">
            <summary>
            Indicates if the progress is measurable or not.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ProgressEvent.Loaded">
            <summary>
            The amount of work already performed by the underlying process. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Events.ProgressEvent.Total">
            <summary>
            The total amount of work that the underlying process is in the progress of performing.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.ProgressEvent.#ctor(System.String,Knyaz.Optimus.Dom.Document)">
            <summary>
            Creates a new ProgressEvent with a given type.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Events.ProgressEvent.InitProgressEvent(System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Initializes the vent.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Events.UIEvent">
            <summary>
            The base class for UI events.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration">
            <summary>
            Interface for css style declaration instances.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration.Item(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="name">Name of property to get.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration.Item(System.Int32)">
            <summary>
            Get tye style property name.
            </summary>
            <param name="idx">Index of property to get.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Gets the style property value.
            </summary>
            <param name="propertyName">Property name to get.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.ICssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Gets the style property prority.
            </summary>
            <param name="propertyName">Property name to get.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Interfaces.IElement">
            <summary>
            Represents an element in an HTML document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Interfaces.IElement.TagName">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.GetElementsByTagName(System.String)">
            <summary>
            Returns a collection containing all descendant elements with the specified tag name.
            </summary>
            <param name="tagNameSelector">A string that specifies the tagname to search for. The value "*" matches all tags</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.GetElementsByClassName(System.String)">
            <summary>
            Returns a collection containing all descendant elements with the specified class name.
            </summary>
            <param name="name">The class name (or multiple names divided by spaces) of the elements to get.</param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.GetAttributeNode(System.String)">
            <summary>
            Retrieves an attribute value by name.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> value as a string, or the string.Empty if that attribute does not have a specified or default value.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.GetAttribute(System.String)">
            <summary>
            Retrieves an attribute node by name.
            </summary>
            <param name="name">The name (nodeName) of the attribute to retrieve.</param>
            <returns>The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node with the specified name (nodeName) or <c>null</c> if there is no such attribute.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute by name.
            </summary>
            <param name="name">The name of the attribute to remove.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.SetAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute. If an attribute with that name is already present in the element, its value is changed to be that of the value parameter.
            </summary>
            <param name="name">The name of the attribute to create or alter.</param>
            <param name="value">Value to set in string form.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.SetAttributeNode(Knyaz.Optimus.Dom.Elements.Attr)">
            <summary>
            Adds a new attribute node. If an attribute with that name (nodeName) is already present in the element, it is replaced by the new one.
            </summary>
            <param name="attr">The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node to add to the attribute list.</param>
            <returns>If the newAttr attribute replaces an existing attribute, the replaced Attr node is returned, otherwise null is returned.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.RemoveAttributeNode(Knyaz.Optimus.Dom.Elements.Attr)">
            <summary>
            Removes the specified attribute node.
            </summary>
            <param name="attr">The <see cref="T:Knyaz.Optimus.Dom.Elements.Attr"/> node to remove from the attribute list.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.HasAttribute(System.String)">
            <summary>
            Returns <c>true</c> if the specified attribute exists, otherwise it returns <c>false</c>.
            </summary>
            <param name="name">The name of the attribute to check.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.HasAttributes">
            <summary>
            Indicates whether this node (if it is an element) has any attributes.
            </summary>
            <returns><c>true</c> if this node has any attributes, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.Contains(Knyaz.Optimus.Dom.Interfaces.INode)">
            <summary>
            Checks whether a node is a descendant of a given Element or not.
            </summary>
            <param name="element">The node to search.</param>
            <returns><c>True</c> if node found, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.QuerySelector(System.String)">
            <summary>
            Returns first descendant element that matches a specified CSS selector(s).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Interfaces.IElement.QuerySelectorAll(System.String)">
            <summary>
            Returns all descendant elements that matches a specified CSS selector(s).
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Interfaces.EventListenerOptions">
            <summary>
            Specifies characteristics about the event listener. 
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Interfaces.EventListenerOptions.Capture">
            <summary>
            Indicates that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Interfaces.EventListenerOptions.Passive">
            <summary>
            If true, indicates that the function specified by listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.Interfaces.EventListenerOptions.Once">
            <summary>
            Indicates that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.ArrayBuffer">
            <summary>
            Represents a generic, fixed-length raw binary data buffer.
            </summary>
            <remarks>
             You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.
             </remarks>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.ArrayBuffer.#ctor(System.Int32)">
            <summary>
            Creates new instance of <see cref="T:Knyaz.Optimus.Dom.Perf.ArrayBuffer"/>
            </summary>
            <param name="size">The size, in bytes, of the array buffer to create.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.ArrayBuffer.#ctor(System.Double)">
            <summary>
            JS compatible constructor.
            </summary>
            <param name="size">The size, in bytes, of the array buffer to create.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.ArrayBuffer.IsView(System.Object)">
            <summary>
            Returns <c>true</c> if arg is one of the ArrayBuffer views, such as typed array objects or a DataView. Returns <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Perf.ArrayBuffer.ByteLength">
            <summary>
            Gets length of buffer in bytes.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.DataView">
            <summary>
            Provides a low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.#ctor(Knyaz.Optimus.Dom.Perf.ArrayBuffer)">
            <summary>
            Creates new DataView instance matches entire buffer.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.#ctor(Knyaz.Optimus.Dom.Perf.ArrayBuffer,System.Int32)">
            <summary>
            Creates new DataView instance matches given buffer from specified offset to the end.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.#ctor(Knyaz.Optimus.Dom.Perf.ArrayBuffer,System.Int32,System.Int32)">
            <summary>
            Creates new DataView instance matches specifeid bytes count of buffer from specified offset.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Perf.DataView.Buffer">
            <summary>
            Gets the ArrayBuffer or SharedArrayBuffer referenced by the DataView.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Perf.DataView.ByteOffset">
            <summary>
            Gets the offset (in bytes) of this view from the start of its ArrayBuffer.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Perf.DataView.ByteLength">
            <summary>
            Gets the length (in bytes) of this view from the start of its ArrayBuffer.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetFloat32(System.Int32,System.Boolean)">
            <summary>
            Gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 32-bit float is stored in little- or big-endian format. If false, a big-endian value is read.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetFloat64(System.Int32,System.Boolean)">
            <summary>
            Gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 64-bit float is stored in little- or big-endian format. If false, a big-endian value is read.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetInt32(System.Int32,System.Boolean)">
            <summary>
            Gets a signed 32-bit integer (int) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 32-bit int is stored in little- or big-endian format. If false, a big-endian value is read.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetUint32(System.Int32,System.Boolean)">
            <summary>
            Gets a unsigned 32-bit integer (uint) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 32-bit int is stored in little- or big-endian format. If false, a big-endian value is read.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetInt16(System.Int32,System.Boolean)">
            <summary>
            Gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 16-bit int is stored in little- or big-endian format. If false, a big-endian value is read.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetUint16(System.Int32,System.Boolean)">
            <summary>
            Gets a unsigned 16-bit integer (ushort) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 16-bit int is stored in little- or big-endian format. If false, a big-endian value is read.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetUint8(System.Int32)">
            <summary>
            Gets a unsigned 8-bit integer (byte) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.GetInt8(System.Int32)">
            <summary>
            Gets a signed 8-bit integer (sbyte) at the specified byte offset from the start of the DataView
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetFloat32(System.Int32,System.Single,System.Boolean)">
            <summary>
            Stores a signed 32-bit float (float) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">Indicates whether the 32-bit float is stored in little- or big-endian format.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetFloat64(System.Int32,System.Double,System.Boolean)">
            <summary>
            Stores a signed 64-bit float (double) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">Indicates whether the 64-bit float is stored in little- or big-endian format.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetInt16(System.Int32,System.Int16,System.Boolean)">
            <summary>
            Stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">Indicates whether the 16-bit int is stored in little- or big-endian format.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetInt32(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Stores a signed 32-bit integer (short) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">Indicates whether the 32-bit int is stored in little- or big-endian format.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetUint16(System.Int32,System.Int16,System.Boolean)">
            <summary>
            Stores a unsigned 16-bit integer (short) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">Indicates whether the 16-bit int is stored in little- or big-endian format.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetUint32(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Stores a unsigned 32-bit integer (short) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">Indicates whether the 32-bit int is stored in little- or big-endian format.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetInt8(System.Int32,System.SByte)">
            <summary>
            Stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.DataView.SetUint8(System.Int32,System.Byte)">
            <summary>
            Stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to store the data.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.TypedArray`1">
            <summary>
            Base class for typed arrays.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Perf.TypedArray`1.Length">
            <summary>
            Returns the length of the typed array from the start of its ArrayBuffer.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.TypedArray`1.Set(Knyaz.Optimus.Dom.Perf.TypedArray{`0},System.Int32)">
            <summary>
            Stores multiple values in the typed array.
            </summary>
            <remarks>
            Two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range.
            </remarks>
            <param name="array">The array from which to copy values. </param>
            <param name="offset">The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).</param>
        </member>
        <member name="M:Knyaz.Optimus.Dom.Perf.TypedArray`1.Set(`0[],System.Int32)">
            <summary>
            Stores multiple values in the typed array.
            </summary>
            <remarks>
            All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown.
            </remarks>
            <param name="array">The array from which to copy values. </param>
            <param name="offset">The offset into the target array at which to begin writing values from the source array. If you omit this value, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0).</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.Perf.TypedArray`1.Item(System.UInt64)">
            <summary>
            Gets or sets the value from/to specified position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.Int8Array">
            <summary>
            8-bit two's complement signed integer array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.UInt8Array">
            <summary>
            8-bit unsigned integer array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.Int16Array">
            <summary>
            16-bit two's complement signed integer array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.Int32Array">
            <summary>
            32-bit integer array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.UInt32Array">
            <summary>
            32-bit integer array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.UInt16Array">
            <summary>
            16-bit unsigned integer
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.Float32Array">
            <summary>
            float 32 (single) array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.Perf.Float64Array">
            <summary>
            float 64 (double) array.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.TagsNames">
            <summary>
            Contains string constants, representing names of html elements.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.A">
            <summary>A</summary>
            <remarks>Hyperlink</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Base">
            <summary>BASE</summary>
            <remarks>Specifies the base URL/target for all relative URLs in a document</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Body">
            <summary>BODY</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Bold">
            <summary>B</summary>
            <remarks>Bold</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Button">
            <summary>BUTTON</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Br">
            <summary>BR</summary>
            <remarks>Line break.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Caption">
            <summary>CAPTION</summary>
            <remarks>Table caption.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Col">
            <summary>COL</summary>
            <remarks>Table column.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Colgroup">
            <summary>COLGROUP</summary>
            <remarks>Table columns group.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Code">
            <summary>CODE</summary>
            <remarks>Defines a piece of code written using some programming language.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Div">
            <summary>DIV</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Form">
            <summary>FORM</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Head">
            <summary>HEAD</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Html">
            <summary>HTML</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.IFrame">
            <summary>IFRAME</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Input">
            <summary>INPUT</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Img">
            <summary>IMG</summary>
            <remarks>Image</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Label">
            <summary>LABEL</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Link">
            <summary>LINK</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Meta">
            <summary>META</summary>
            <remarks>Metadata about an HTML document</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Nav">
            <summary>NAV</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.OptGroup">
            <summary>OPTGROUP</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Option">
            <summary>OPTION</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.P">
            <summary>P</summary>
            <remarks>Paragraph.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Script">
            <summary>SCRIPT</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Select">
            <summary>SELECT</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Span">
            <summary>SPAN</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Style">
            <summary>STYLE</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Table">
            <summary>TABLE</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.TBody">
            <summary>TBODY</summary>
            <remarks>Table body.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Td">
            <summary>TD</summary>
            <remarks>Table data (cell).</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Textarea">
            <summary>TEXTAREA</summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.TFoot">
            <summary>TFOOT</summary>
            <remarks>Table footer.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.THead">
            <summary>THEAD</summary>
            <remarks>Table header.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Tr">
            <summary>TR</summary>
            <remarks>Table row.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Th">
            <summary>TH</summary>
            <remarks>Table header row.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Ul">
            <summary>UL</summary>
            <remarks>Unordered list.</remarks>
        </member>
        <member name="F:Knyaz.Optimus.Dom.TagsNames.Var">
            <summary>Variable</summary>
        </member>
        <member name="T:Knyaz.Optimus.Dom.XmlHttpRequest">
            <summary>
            https://xhr.spec.whatwg.org/
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.XmlHttpRequest.OnTimeout">
            <summary>
            Called whenever the request times out.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Dom.XmlHttpRequest.OnReadyStateChange">
             <summary>
            called whenever the readyState attribute changes. 
             </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.XmlHttpRequest.Open(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            initializes a request.
            </summary>
            <param name="method">The HTTP method to use, such as "GET", "POST", "PUT", "DELETE", etc.</param>
            <param name="url">The URL to send the request to.</param>
            <param name="async">If this value is false, the method does not return until the response is received</param>
            <param name="username">The user name to use for authentication purposes.</param>
            <param name="password">The password to use for authentication purposes.</param>
        </member>
        <member name="F:Knyaz.Optimus.Dom.XmlHttpRequest.UNSENT">
            <summary>
            ReadyState = 0 - Client has been created. Open() not called yet.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.XmlHttpRequest.OPENED">
            <summary>
            ReadyState = 1 - Open() has been called
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.XmlHttpRequest.HEADERS_RECEIVED">
            <summary>
            ReadyState = 2 - Send() has been called, and headers and status are available.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.XmlHttpRequest.LOADING">
            <summary>
            ReadyState = 3 - ResponseText holds partial data
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Dom.XmlHttpRequest.DONE">
            <summary>
            ReadyState = 4 - The operation is complete.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.ReadyState">
            <summary>
            Gets the state an XMLHttpRequest client is in. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.ResponseXML">
            <summary>
            Gets a Document containing the HTML or XML retrieved by the request.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.ResponseText">
            <summary>
            Gets the response to the request as text, or null if the request was unsuccessful or has not yet been sent.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.XmlHttpRequest.SetRequestHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP request header. You must call SetRequestHeader() after Open(), but before Send().
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.XmlHttpRequest.GetAllResponseHeaders">
            <summary>
            Returns all the response headers, separated by CRLF, as a string, or null if no response has been received.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.StatusText">
            <summary>
            Returns a string containing the response string returned by the HTTP server. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.Response">
            <summary>
            Gets the response object of the type specified by ResponseType property.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.ResponseType">
            <summary>
            Gets or sets the response type.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.Status">
            <summary>
            Gets the numerical standard HTTP status code of the response of the XMLHttpRequest.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Dom.XmlHttpRequest.Send(System.Object)">
            <summary>
            Sends the request.
            </summary>
            <param name="data">A body of data to be sent in the XHR request.</param>
        </member>
        <member name="P:Knyaz.Optimus.Dom.XmlHttpRequest.Timeout">
            <summary>
            Gets or sets the number of milliseconds a request can take before automatically being terminated.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Engine">
            <summary>
            The web engine that allows you you to load html pages, execute JavaScript and get live DOM.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.ResourceProvider">
            <summary>
            Gets the Engine's resource provider - entity through which the engine gets the html pages, js files, images and etc.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.ScriptExecutor">
            <summary>
            Gets the current Script execution engine. Can be used to execute custom script or get some global values.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.Scripting">
            <summary>
            Glues Document and ScriptExecutor.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.Console">
            <summary>
            Gets the browser's console object.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.Window">
            <summary>
            Gets the current Window object.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Engine.#ctor(Knyaz.Optimus.ResourceProviders.IResourceProvider)">
            <summary>
            Creates new Engine instance with default settings (Js enabled, css disabled).
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Engine.OnWindowOpen">
            <summary>
            Occurs when window.open method called.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.Document">
            <summary>
            Gets the active <see cref="P:Knyaz.Optimus.Engine.Document"/> if exists (OpenUrl must be called before).
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Engine.Uri">
            <summary>
            Gets the current Uri of the document.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Engine.OnUriChanged">
            <summary>
            Called on <see cref="P:Knyaz.Optimus.Engine.Uri"/> changed.
            </summary>
        </member>
        <member name="E:Knyaz.Optimus.Engine.DocumentChanged">
            <summary>
            Called when new Document created and assigned to <see cref="P:Knyaz.Optimus.Engine.Document"/> property.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Engine.OpenUrl(System.String)">
            <summary>
            Creates new <see cref="P:Knyaz.Optimus.Engine.Document"/> and loads it from specified path (http or file).
            </summary>
            <param name="path">The string which represents Uri of the document to be loaded.</param>
        </member>
        <member name="E:Knyaz.Optimus.Engine.PreHandleResponse">
            <summary>
            Occurs before the document being loaded from response. 
            Can be used to handle non-html response types.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Engine.Load(System.IO.Stream)">
            <summary>
            For tests
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Knyaz.Optimus.Engine.ComputedStylesEnabled">
            <summary>
            Enables or disables the css loading and styles evaluation.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.Engine.CurrentMedia">
            <summary>
            Gets the current media settings (used in computed styles evaluation).
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Environment.History">
            <summary>
            Part of WEB API that allows manipulation of the session history.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.History.Lenght">
            <summary>
            Gets the number of elements in the session history.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.History.Go(System.Int64)">
            <summary>
            Loads a page from the session history, identified by its relative location to the current page.
            </summary>
            <param name="delta">Relative page location in history stack (-1 - previous, 1 - next, etc).</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.History.Back">
            <summary>
            Goes to the previous page in session history. Equivalent to History.Go(-1)
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.History.Forward">
            <summary>
            Goes to the next page in session history; this is equivalent to History.Go(1).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.History.ReplaceState(System.Object,System.String,System.String)">
            <summary>
            Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL.
            </summary>
            <param name="data">The object which is associated with the new history entry created by pushState(). 
            This object passed in to the popstate event handler.</param>
            <param name="title">Some title.</param>
            <param name="url">The new history entry's URL is given by this parameter. Note that the new page won't be loaded.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.History.PushState(System.Object,System.String,System.String)">
            <summary>
            Adds new history entry.
            </summary>
            <param name="data">The object which is associated with the new history entry created by pushState(). 
            This object passed in to the popstate event handler.</param>
            <param name="title">Some title.</param>
            <param name="url">The new history entry's URL is given by this parameter. Note that the new page won't be loaded.</param>
        </member>
        <member name="T:Knyaz.Optimus.Environment.Location">
            <summary>
            Represents the location (URL) of the document.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Href">
            <summary>
            Gets or sets the entire URL. If changed, the associated document navigates to the new page.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Hash">
            <summary>
            Anchor part of a URL (text which follows '#')
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Host">
            <summary>
            Gets or sets the host, that is the hostname, a ':', and the port of the URL.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Hostname">
            <summary>
            Gets or sets the domain of the URL.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Origin">
            <summary>
            Gets or sets the canonical form of the origin of the specific location.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Pathname">
            <summary>
            Gets or sets the string ontaining an initial '/' followed by the path of the URL.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Port">
            <summary>
            Gets or sets the port number of the URL.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Protocol">
            <summary>
            Gets or sets the protocol scheme of the URL, including the final ':'.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Location.Search">
            <summary>
            Gets or sets a string containing a '?' followed by the parameters or "querystring" of the URL.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Location.Assign(System.String)">
            <summary>
            Loads the resource at the URL provided in parameter.
            </summary>
            <param name="url">The URL of the page to navigate to.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Location.Replace(System.String)">
            <summary>
            Replaces the current resource with the one at the provided URL. 
            The difference from the assign() method is that after using Replace() the current page will not be saved
            in session History, meaning the user won't be able to use the back button to navigate to it.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Location.Reload(System.Boolean)">
            <summary>
            Reloads the resource from the current URL.
            </summary>
            <param name="force">If <c>true</c>, the page to be reloaded from the server. Othervise, the engine may reload the page from its cache.</param>
        </member>
        <member name="T:Knyaz.Optimus.Environment.Navigator">
            <summary>
            http://www.w3schools.com/jsref/obj_navigator.asp
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Environment.Screen">
            <summary>
            http://www.w3schools.com/js/js_window_screen.asp
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Environment.Storage">
            <summary>
            Storage allows to example add, modify or delete stored data items.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Storage.Length">
            <summary>
            Returns an integer representing the number of data items stored in the Storage object.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Storage.Key(System.Int32)">
            <summary>
            Return the name of the key in the storage by specified index.
            </summary>
            <param name="index">Index of key to return.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Storage.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Storage.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Storage.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from the storage.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Storage.Clear">
            <summary>
            When invoked, will empty all keys out of the storage.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Storage.Item(System.String)">
            <summary>
            Gets or sets storage item.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Environment.Window">
            <summary>
            http://www.w3.org/TR/html5/browsers.html#window
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Window.InnerWidth">
            <summary>
            Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Window.InnerHeight">
            <summary>
            Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Window.Screen">
            <summary>
            Returns a reference to the <see cref="P:Knyaz.Optimus.Environment.Window.Screen"/> object associated with the window
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Window.Location">
            <summary>
            Represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. 
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Window.Navigator">
            <summary>
            Gets a reference to the Navigator object, which can be queried for information about the application running the script.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Environment.Window.History">
            <summary>
            Gets a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.SetTimeout(System.Action{System.Object[]},System.Nullable{System.Double},System.Object[])">
            <summary>
            Sets a timer which executes a function or specified piece of code once after the timer expires.
            </summary>
            <param name="handler"></param>
            <param name="delay">The time, in milliseconds, the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used, meaning execute "immediately", or more accurately, as soon as possible. </param>
            <param name="data">Variables to be passed to the handler.</param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.ClearTimeout(System.Int32)">
            <summary>
            Cancels a timeout previously established by calling <see cref="M:Knyaz.Optimus.Environment.Window.SetTimeout(System.Action{System.Object[]},System.Nullable{System.Double},System.Object[])"/>.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.SetInterval(System.Action{System.Object[]},System.Nullable{System.Double},System.Object[])">
            <summary>
            Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
            </summary>
            <returns>It returns an interval ID which uniquely identifies the interval, so you can remove it later by calling <see cref="M:Knyaz.Optimus.Environment.Window.ClearInterval(System.Int32)"/></returns>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.ClearInterval(System.Int32)">
            <summary>
            Cancels a timed, repeating action which was previously established by a call to <see cref="M:Knyaz.Optimus.Environment.Window.SetInterval(System.Action{System.Object[]},System.Nullable{System.Double},System.Object[])"/>.
            </summary>
            <param name="handle">The interval ID to be cancelled.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},System.Boolean)">
            <summary>
            Adds the specified EventListener-compatible object to the list of event listeners for the specified event type on the EventTarget on which it is called. 
            </summary>
            <param name="type">A string representing the event type to listen for.</param>
            <param name="listener">Event handler.</param>
            <param name="useCapture">Indicates whether events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.RemoveEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},System.Boolean)">
            <summary>
            Removes from the EventTarget an event listener previously registered with <see cref="M:Knyaz.Optimus.Environment.Window.AddEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},Knyaz.Optimus.Dom.Interfaces.EventListenerOptions)"/>
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.RemoveEventListener(System.String,System.Action{Knyaz.Optimus.Dom.Events.Event},Knyaz.Optimus.Dom.Interfaces.EventListenerOptions)">
            <summary>
            Removes previously registered event handler.
            </summary>
            <param name="type">The type name of event.</param>
            <param name="listener">The handler to be removed.</param>
            <param name="options">The options with which the listener was added.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.DispatchEvent(Knyaz.Optimus.Dom.Events.Event)">
            <summary>
            Dispatches an Event at the specified EventTarget, invoking the affected EventListeners in the appropriate order.
            </summary>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.Alert(System.String)">
            <summary>
            Displays an alert dialog with the optional specified content and an OK button.
            </summary>
            <param name="message"></param>
        </member>
        <member name="E:Knyaz.Optimus.Environment.Window.OnAlert">
            <summary>
            Callback to attach the handler of 'alert' method calls.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.GetComputedStyle(Knyaz.Optimus.Dom.Interfaces.IElement)">
            <summary>
            Gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.GetComputedStyle(Knyaz.Optimus.Dom.Interfaces.IElement,System.String)">
            <summary>
            Gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain. 
            </summary>
            <param name="element">The <see cref="T:Knyaz.Optimus.Dom.Elements.Element"/> for which to get the computed style.</param>
            <param name="pseudoElt">A string specifying the pseudo-element to match. Must be omitted (or null) for regular elements.</param>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.MatchMedia(System.String)">
            <summary>
            Returns a new MediaQueryList object representing the parsed results of the specified media query string.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.Dispose">
            <summary>
            Disposes the window object.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Environment.Window.Open(System.String,System.String,System.String)">
            <summary>
            Loads the specified resource into the browsing context (window, &lt;iframe&gt; or tab) with the specified name.
            </summary>
            <param name="url">The URL of the resource to be loaded.</param>
            <param name="windowName">The name of the browsing context (window, &lt;iframe&gt; or tab) into which to load the specified resource.</param>
            <param name="features">The comma-separated list of window features given with their corresponding values in the form "name=value"</param>
        </member>
        <member name="T:Knyaz.Optimus.Html.HtmlChunk">
            <summary>
            Represents the minimal piece of html document.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Html.HtmlReader">
            <summary>
            Contains methods to parse HTML document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Html.HtmlReader.Read(System.IO.Stream)">
            <summary>
            Reads the sequence of html chunks from HTML document.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.Html.HtmlReader.IsEndsWith(System.Collections.Generic.List{System.Char},System.String)">
            <summary>
            Case insensitive comparison
            </summary>
            <param name="buffer"></param>
            <param name="endPhrase"></param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Resources.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Resources.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Resources.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Knyaz.Optimus.Resources.Resource.moz_default">
            <summary>
            default css style
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ScriptExecuting.ClrObject">
            <summary>
            Represents c# object (DOM and other) in JS environment.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.ScriptExecuting.DomConverter.ConvertDelegateArrayArguments(Jint.Native.JsValue,Jint.Native.JsValue)">
            <summary>
            Converts js function to c# delegate with convertion array to arguments
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ScriptExecuting.ListAdapterEx">
            <summary>
            For of jint's list adapter
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ScriptExecuting.JsNameAttribute">
            <summary>
            Allows to specify the name for the method which will available in JavaScript code.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.ScriptExecuting.ListAdapter">
            <summary>
            List to JS Array adapter
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.TestingTools.ElementExtension">
            <summary>
            Contains helper methods for work with <see cref="T:Knyaz.Optimus.Engine"/>.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.ElementExtension.EnterText(Knyaz.Optimus.Dom.Elements.HtmlInputElement,System.String)">
            <summary>
            Emulate entering text by user into input textbox.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.ElementExtension.EnterText(Knyaz.Optimus.Dom.Elements.HtmlTextAreaElement,System.String)">
            <summary>
            Emulate entering text by user into input textbox.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.ElementExtension.GetComputedStyle(Knyaz.Optimus.Dom.Interfaces.IElement)">
            <summary>
            Gets the all element styles. Shortened form for to call Element.OwnerDocument.DefaultView.GetComputedStyle(elt).
            </summary>
            <param name="elt">The element to get style for.</param>
        </member>
        <member name="T:Knyaz.Optimus.TestingTools.EngineExtension">
            <summary>
            Contains helper methods for testing with optimus Engine.
            </summary>
        </member>
        <member name="F:Knyaz.Optimus.TestingTools.EngineExtension.DefaultTimeout">
            <summary>
            Default timeout for 'wait*' methods in milliseconds.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitDocumentLoad(Knyaz.Optimus.Engine)">
            <summary>
            Wait for the loading of document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitId(Knyaz.Optimus.Engine,System.String)">
            <summary>
            Blocks the execution of the current thread until an item with the specified ID appears in the document.
            </summary>
            <param name="engine">The engine with the document to wait in.</param>
            <param name="id">The identifier to be awaited.</param>
            <returns>Element with specified Id, <c>null</c> if the element with the specified identifier has not appeared in the document for the default timeout.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitId(Knyaz.Optimus.Engine,System.String,System.Int32)">
            <summary>
            Blocks the execution of the current thread until an item with the specified ID appears in the document.
            </summary>
            <param name="engine">Document onwer.</param>
            <param name="id">Id of element waiting for.</param>
            <param name="timeout">The time to wait in milliseconds</param>
            <returns>Element with specified Id, <c>null</c> if the element with the specified identifier has not appeared in the document for a given time.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitDesappearingOfId(Knyaz.Optimus.Engine,System.String)">
            <summary>
            Locks the current thread until the element with specified id disappears.
            </summary>
            <param name="engine">Document owner.</param>
            <param name="id">Identifier of the item to be disappeared.</param>
            <returns>Element if found, <c>null</c> othervise.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitDesappearingOfId(Knyaz.Optimus.Engine,System.String,System.Int32)">
            <summary>
            Locks the current thread until the element with specified id disappears.
            </summary>
            <param name="engine">Document owner.</param>
            <param name="id">Identifier of the item to be disappeared.</param>
            <param name="timeout">The timeout</param>
            <returns>Element if found, <c>null</c> othervise.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitId(Knyaz.Optimus.Dom.Document,System.String)">
            <summary>
            Wait while element with specified id appears in document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitId(Knyaz.Optimus.Dom.Document,System.String,System.Int32)">
            <summary>
            Wait while element with specified id appears in document.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.FirstElement(Knyaz.Optimus.Engine,System.String)">
            <summary>
            Search the first html element in document which satisfies specified selector.
            </summary>
            <param name="engine">Document owner.</param>
            <param name="query">Css selector.</param>
            <returns>Found <see cref="T:Knyaz.Optimus.Dom.Elements.HtmlElement"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitSelector(Knyaz.Optimus.Engine,System.String)">
            <summary>
            Waits at least one element which satisfies to a given query selector.
            </summary>
            <param name="engine"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitSelector(Knyaz.Optimus.Engine,System.String,System.Int32)">
            <summary>
            Blocks the execution of the current thread until an at least one item which satisfies specified selector appears in the document.
            </summary>
            <param name="engine">Document owner.</param>
            <param name="query">Css selector.</param>
            <param name="timeout">Time to wait in milliseconds.</param>
            <returns>Collection of found elements.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.WaitSelector(Knyaz.Optimus.Dom.Document,System.String,System.Int32)">
            <summary>
            Freezes the current thread until at least one element that matches the query appears in the document.
            </summary>
            <param name="doc"></param>
            <param name="query"></param>
            <param name="timeout"></param>
            <returns>Matched elements.</returns>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.DumpToFile(Knyaz.Optimus.Engine,System.String)">
            <summary>
            Dumps the entire documents html to the file.
            </summary>
            <param name="engine">Document owner.</param>
            <param name="fileName">Target file name.</param>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.Get``1(Knyaz.Optimus.Dom.Elements.Element,System.String)">
            <summary>
            Alias for QuerySelectorAll method with element types filtration.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.UseKnownUserAgent(Knyaz.Optimus.Engine,Knyaz.Optimus.TestingTools.KnownUserAgents)">
            <summary>
            Setup user agent name to be one from the know list.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.EngineExtension.UseCustomUserAgent(Knyaz.Optimus.Engine,System.String)">
            <summary>
            Setup user agent name value that avaliable in js (navigator.userAgent) and sent within http request headers.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.TestingTools.SaveDocumentExtension">
            <summary>
            Contains methods for saving of html document. 
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.TestingTools.SaveDocumentExtension.Save(Knyaz.Optimus.Dom.Document,System.IO.TextWriter)">
            <summary>
            Writes html document using specified <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="doc"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Knyaz.Optimus.Tools.CookieParser">
            <summary>
            Contains cookie parsing method.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Tools.CookieParser.FromString(System.String)">
            <summary>
            Converts string representation of cookie to <see cref="T:System.Net.Cookie"/> instance.
            </summary>
            <param name="cookieText">Textual representation of cookie, like 'User=I; Path=/'</param>
            <returns></returns>
        </member>
        <member name="T:Knyaz.Optimus.Tools.Disposable">
            <summary>
            Wrapper for dispose delegate invocation.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Tools.IEnumerableExtension">
            <summary>
            Contains extension method for the IEnumerable interface.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Tools.NodeExtension">
            <summary>
            Helper class for work with Element
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Tools.NodeExtension.Flatten(Knyaz.Optimus.Dom.Interfaces.INode)">
            <summary>
            Gets all descendants of a given node with the node itself.
            </summary>
            <returns>The original node and all of its descendants.</returns>
        </member>
        <member name="M:Knyaz.Optimus.Tools.NodeExtension.IsInDocument(Knyaz.Optimus.Dom.Interfaces.INode)">
            <summary>
            Determines if the node lies to document hierarhcy.
            </summary>
            <returns><c>true</c> if is in document the specified node; otherwise, <c>false</c>.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Knyaz.Optimus.Tools.NodeExtension.Ancestors(Knyaz.Optimus.Dom.Interfaces.INode)">
            <summary>
            Retrieves all node ancestors.
            </summary>
        </member>
        <member name="T:Knyaz.Optimus.Tools.StreamExtension">
            <summary>
            Helper class to work with Stream.
            </summary>
        </member>
        <member name="M:Knyaz.Optimus.Tools.StreamExtension.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads entire Stream to the string.
            </summary>
        </member>
    </members>
</doc>
